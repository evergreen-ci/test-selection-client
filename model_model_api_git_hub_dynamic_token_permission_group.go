/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelAPIGitHubDynamicTokenPermissionGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAPIGitHubDynamicTokenPermissionGroup{}

// ModelAPIGitHubDynamicTokenPermissionGroup struct for ModelAPIGitHubDynamicTokenPermissionGroup
type ModelAPIGitHubDynamicTokenPermissionGroup struct {
	// AllPermissions is a flag that indicates that the group has all permissions. If this is set to true, the Permissions field is ignored. If this is set to false, the Permissions field is used (and may be nil, representing no permissions).
	AllPermissions *bool `json:"all_permissions,omitempty"`
	// Name of the GitHub permission group.
	Name *string `json:"name,omitempty"`
	// Permissions for the GitHub permission group.
	Permissions *map[string]string `json:"permissions,omitempty"`
}

// NewModelAPIGitHubDynamicTokenPermissionGroup instantiates a new ModelAPIGitHubDynamicTokenPermissionGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAPIGitHubDynamicTokenPermissionGroup() *ModelAPIGitHubDynamicTokenPermissionGroup {
	this := ModelAPIGitHubDynamicTokenPermissionGroup{}
	return &this
}

// NewModelAPIGitHubDynamicTokenPermissionGroupWithDefaults instantiates a new ModelAPIGitHubDynamicTokenPermissionGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAPIGitHubDynamicTokenPermissionGroupWithDefaults() *ModelAPIGitHubDynamicTokenPermissionGroup {
	this := ModelAPIGitHubDynamicTokenPermissionGroup{}
	return &this
}

// GetAllPermissions returns the AllPermissions field value if set, zero value otherwise.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) GetAllPermissions() bool {
	if o == nil || IsNil(o.AllPermissions) {
		var ret bool
		return ret
	}
	return *o.AllPermissions
}

// GetAllPermissionsOk returns a tuple with the AllPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) GetAllPermissionsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllPermissions) {
		return nil, false
	}
	return o.AllPermissions, true
}

// HasAllPermissions returns a boolean if a field has been set.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) HasAllPermissions() bool {
	if o != nil && !IsNil(o.AllPermissions) {
		return true
	}

	return false
}

// SetAllPermissions gets a reference to the given bool and assigns it to the AllPermissions field.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) SetAllPermissions(v bool) {
	o.AllPermissions = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) GetPermissions() map[string]string {
	if o == nil || IsNil(o.Permissions) {
		var ret map[string]string
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) GetPermissionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]string and assigns it to the Permissions field.
func (o *ModelAPIGitHubDynamicTokenPermissionGroup) SetPermissions(v map[string]string) {
	o.Permissions = &v
}

func (o ModelAPIGitHubDynamicTokenPermissionGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAPIGitHubDynamicTokenPermissionGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllPermissions) {
		toSerialize["all_permissions"] = o.AllPermissions
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableModelAPIGitHubDynamicTokenPermissionGroup struct {
	value *ModelAPIGitHubDynamicTokenPermissionGroup
	isSet bool
}

func (v NullableModelAPIGitHubDynamicTokenPermissionGroup) Get() *ModelAPIGitHubDynamicTokenPermissionGroup {
	return v.value
}

func (v *NullableModelAPIGitHubDynamicTokenPermissionGroup) Set(val *ModelAPIGitHubDynamicTokenPermissionGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAPIGitHubDynamicTokenPermissionGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAPIGitHubDynamicTokenPermissionGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAPIGitHubDynamicTokenPermissionGroup(val *ModelAPIGitHubDynamicTokenPermissionGroup) *NullableModelAPIGitHubDynamicTokenPermissionGroup {
	return &NullableModelAPIGitHubDynamicTokenPermissionGroup{value: val, isSet: true}
}

func (v NullableModelAPIGitHubDynamicTokenPermissionGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAPIGitHubDynamicTokenPermissionGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


