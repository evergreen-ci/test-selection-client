/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelTaskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelTaskInfo{}

// ModelTaskInfo struct for ModelTaskInfo
type ModelTaskInfo struct {
	// Unique identifier for the build of the project that this task is run as part of
	BuildId *string `json:"build_id,omitempty"`
	// Time that this task was dispatched to this host
	DispatchTime *string `json:"dispatch_time,omitempty"`
	// The name of this task
	Name *string `json:"name,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
	// Unique Identifier of this task. Can be used to fetch more informaiton about this task
	TaskId *string `json:"task_id,omitempty"`
	// Unique identifier for the version of the project that this task is run as part of
	VersionId *string `json:"version_id,omitempty"`
}

// NewModelTaskInfo instantiates a new ModelTaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelTaskInfo() *ModelTaskInfo {
	this := ModelTaskInfo{}
	return &this
}

// NewModelTaskInfoWithDefaults instantiates a new ModelTaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelTaskInfoWithDefaults() *ModelTaskInfo {
	this := ModelTaskInfo{}
	return &this
}

// GetBuildId returns the BuildId field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetBuildId() string {
	if o == nil || IsNil(o.BuildId) {
		var ret string
		return ret
	}
	return *o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetBuildIdOk() (*string, bool) {
	if o == nil || IsNil(o.BuildId) {
		return nil, false
	}
	return o.BuildId, true
}

// HasBuildId returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasBuildId() bool {
	if o != nil && !IsNil(o.BuildId) {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given string and assigns it to the BuildId field.
func (o *ModelTaskInfo) SetBuildId(v string) {
	o.BuildId = &v
}

// GetDispatchTime returns the DispatchTime field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetDispatchTime() string {
	if o == nil || IsNil(o.DispatchTime) {
		var ret string
		return ret
	}
	return *o.DispatchTime
}

// GetDispatchTimeOk returns a tuple with the DispatchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetDispatchTimeOk() (*string, bool) {
	if o == nil || IsNil(o.DispatchTime) {
		return nil, false
	}
	return o.DispatchTime, true
}

// HasDispatchTime returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasDispatchTime() bool {
	if o != nil && !IsNil(o.DispatchTime) {
		return true
	}

	return false
}

// SetDispatchTime gets a reference to the given string and assigns it to the DispatchTime field.
func (o *ModelTaskInfo) SetDispatchTime(v string) {
	o.DispatchTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelTaskInfo) SetName(v string) {
	o.Name = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *ModelTaskInfo) SetStartTime(v string) {
	o.StartTime = &v
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetTaskId() string {
	if o == nil || IsNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetTaskIdOk() (*string, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *ModelTaskInfo) SetTaskId(v string) {
	o.TaskId = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetVersionId() string {
	if o == nil || IsNil(o.VersionId) {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *ModelTaskInfo) SetVersionId(v string) {
	o.VersionId = &v
}

func (o ModelTaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelTaskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildId) {
		toSerialize["build_id"] = o.BuildId
	}
	if !IsNil(o.DispatchTime) {
		toSerialize["dispatch_time"] = o.DispatchTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.TaskId) {
		toSerialize["task_id"] = o.TaskId
	}
	if !IsNil(o.VersionId) {
		toSerialize["version_id"] = o.VersionId
	}
	return toSerialize, nil
}

type NullableModelTaskInfo struct {
	value *ModelTaskInfo
	isSet bool
}

func (v NullableModelTaskInfo) Get() *ModelTaskInfo {
	return v.value
}

func (v *NullableModelTaskInfo) Set(val *ModelTaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelTaskInfo(val *ModelTaskInfo) *NullableModelTaskInfo {
	return &NullableModelTaskInfo{value: val, isSet: true}
}

func (v NullableModelTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


