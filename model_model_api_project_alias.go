/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelAPIProjectAlias type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAPIProjectAlias{}

// ModelAPIProjectAlias struct for ModelAPIProjectAlias
type ModelAPIProjectAlias struct {
	// Identifier for the project alias.
	Id *string `json:"_id,omitempty"`
	// Name of the alias.
	Alias *string `json:"alias,omitempty"`
	// If set, deletes the project alias by name.
	Delete *bool `json:"delete,omitempty"`
	// Human-friendly description for the alias.
	Description *string `json:"description,omitempty"`
	// Regex for matching git tags to run git tag versions.
	GitTag *string `json:"git_tag,omitempty"`
	// List of allowed parameters to the alias.
	Parameters []ModelAPIParameter `json:"parameters,omitempty"`
	// Path to project config file to use.
	RemotePath *string `json:"remote_path,omitempty"`
	// Task tag selectors to match.
	Tags []string `json:"tags,omitempty"`
	// Regex for tasks to match.
	Task *string `json:"task,omitempty"`
	// Regex for build variants to match.
	Variant *string `json:"variant,omitempty"`
	// Build variant tags selectors to match.
	VariantTags []string `json:"variant_tags,omitempty"`
}

// NewModelAPIProjectAlias instantiates a new ModelAPIProjectAlias object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAPIProjectAlias() *ModelAPIProjectAlias {
	this := ModelAPIProjectAlias{}
	return &this
}

// NewModelAPIProjectAliasWithDefaults instantiates a new ModelAPIProjectAlias object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAPIProjectAliasWithDefaults() *ModelAPIProjectAlias {
	this := ModelAPIProjectAlias{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelAPIProjectAlias) SetId(v string) {
	o.Id = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *ModelAPIProjectAlias) SetAlias(v string) {
	o.Alias = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetDelete() bool {
	if o == nil || IsNil(o.Delete) {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *ModelAPIProjectAlias) SetDelete(v bool) {
	o.Delete = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelAPIProjectAlias) SetDescription(v string) {
	o.Description = &v
}

// GetGitTag returns the GitTag field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetGitTag() string {
	if o == nil || IsNil(o.GitTag) {
		var ret string
		return ret
	}
	return *o.GitTag
}

// GetGitTagOk returns a tuple with the GitTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetGitTagOk() (*string, bool) {
	if o == nil || IsNil(o.GitTag) {
		return nil, false
	}
	return o.GitTag, true
}

// HasGitTag returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasGitTag() bool {
	if o != nil && !IsNil(o.GitTag) {
		return true
	}

	return false
}

// SetGitTag gets a reference to the given string and assigns it to the GitTag field.
func (o *ModelAPIProjectAlias) SetGitTag(v string) {
	o.GitTag = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetParameters() []ModelAPIParameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []ModelAPIParameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetParametersOk() ([]ModelAPIParameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []ModelAPIParameter and assigns it to the Parameters field.
func (o *ModelAPIProjectAlias) SetParameters(v []ModelAPIParameter) {
	o.Parameters = v
}

// GetRemotePath returns the RemotePath field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetRemotePath() string {
	if o == nil || IsNil(o.RemotePath) {
		var ret string
		return ret
	}
	return *o.RemotePath
}

// GetRemotePathOk returns a tuple with the RemotePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetRemotePathOk() (*string, bool) {
	if o == nil || IsNil(o.RemotePath) {
		return nil, false
	}
	return o.RemotePath, true
}

// HasRemotePath returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasRemotePath() bool {
	if o != nil && !IsNil(o.RemotePath) {
		return true
	}

	return false
}

// SetRemotePath gets a reference to the given string and assigns it to the RemotePath field.
func (o *ModelAPIProjectAlias) SetRemotePath(v string) {
	o.RemotePath = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ModelAPIProjectAlias) SetTags(v []string) {
	o.Tags = v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetTask() string {
	if o == nil || IsNil(o.Task) {
		var ret string
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetTaskOk() (*string, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// HasTask returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given string and assigns it to the Task field.
func (o *ModelAPIProjectAlias) SetTask(v string) {
	o.Task = &v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetVariant() string {
	if o == nil || IsNil(o.Variant) {
		var ret string
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetVariantOk() (*string, bool) {
	if o == nil || IsNil(o.Variant) {
		return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasVariant() bool {
	if o != nil && !IsNil(o.Variant) {
		return true
	}

	return false
}

// SetVariant gets a reference to the given string and assigns it to the Variant field.
func (o *ModelAPIProjectAlias) SetVariant(v string) {
	o.Variant = &v
}

// GetVariantTags returns the VariantTags field value if set, zero value otherwise.
func (o *ModelAPIProjectAlias) GetVariantTags() []string {
	if o == nil || IsNil(o.VariantTags) {
		var ret []string
		return ret
	}
	return o.VariantTags
}

// GetVariantTagsOk returns a tuple with the VariantTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectAlias) GetVariantTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.VariantTags) {
		return nil, false
	}
	return o.VariantTags, true
}

// HasVariantTags returns a boolean if a field has been set.
func (o *ModelAPIProjectAlias) HasVariantTags() bool {
	if o != nil && !IsNil(o.VariantTags) {
		return true
	}

	return false
}

// SetVariantTags gets a reference to the given []string and assigns it to the VariantTags field.
func (o *ModelAPIProjectAlias) SetVariantTags(v []string) {
	o.VariantTags = v
}

func (o ModelAPIProjectAlias) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAPIProjectAlias) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["_id"] = o.Id
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.GitTag) {
		toSerialize["git_tag"] = o.GitTag
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.RemotePath) {
		toSerialize["remote_path"] = o.RemotePath
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	if !IsNil(o.Variant) {
		toSerialize["variant"] = o.Variant
	}
	if !IsNil(o.VariantTags) {
		toSerialize["variant_tags"] = o.VariantTags
	}
	return toSerialize, nil
}

type NullableModelAPIProjectAlias struct {
	value *ModelAPIProjectAlias
	isSet bool
}

func (v NullableModelAPIProjectAlias) Get() *ModelAPIProjectAlias {
	return v.value
}

func (v *NullableModelAPIProjectAlias) Set(val *ModelAPIProjectAlias) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAPIProjectAlias) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAPIProjectAlias) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAPIProjectAlias(val *ModelAPIProjectAlias) *NullableModelAPIProjectAlias {
	return &NullableModelAPIProjectAlias{value: val, isSet: true}
}

func (v NullableModelAPIProjectAlias) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAPIProjectAlias) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


