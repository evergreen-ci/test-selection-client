/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoutePatchTasks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutePatchTasks{}

// RoutePatchTasks struct for RoutePatchTasks
type RoutePatchTasks struct {
	// Optional, if sent will update the patch's description
	Description *string `json:"description,omitempty"`
	// Required, these are the variants and tasks that the patch should run. For an already-scheduled patch, any new tasks in this array will be created and any existing tasks not in this array will be unscheduled.
	Variants []RouteVariant `json:"variants,omitempty"`
}

// NewRoutePatchTasks instantiates a new RoutePatchTasks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutePatchTasks() *RoutePatchTasks {
	this := RoutePatchTasks{}
	return &this
}

// NewRoutePatchTasksWithDefaults instantiates a new RoutePatchTasks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutePatchTasksWithDefaults() *RoutePatchTasks {
	this := RoutePatchTasks{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoutePatchTasks) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePatchTasks) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoutePatchTasks) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoutePatchTasks) SetDescription(v string) {
	o.Description = &v
}

// GetVariants returns the Variants field value if set, zero value otherwise.
func (o *RoutePatchTasks) GetVariants() []RouteVariant {
	if o == nil || IsNil(o.Variants) {
		var ret []RouteVariant
		return ret
	}
	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePatchTasks) GetVariantsOk() ([]RouteVariant, bool) {
	if o == nil || IsNil(o.Variants) {
		return nil, false
	}
	return o.Variants, true
}

// HasVariants returns a boolean if a field has been set.
func (o *RoutePatchTasks) HasVariants() bool {
	if o != nil && !IsNil(o.Variants) {
		return true
	}

	return false
}

// SetVariants gets a reference to the given []RouteVariant and assigns it to the Variants field.
func (o *RoutePatchTasks) SetVariants(v []RouteVariant) {
	o.Variants = v
}

func (o RoutePatchTasks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutePatchTasks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Variants) {
		toSerialize["variants"] = o.Variants
	}
	return toSerialize, nil
}

type NullableRoutePatchTasks struct {
	value *RoutePatchTasks
	isSet bool
}

func (v NullableRoutePatchTasks) Get() *RoutePatchTasks {
	return v.value
}

func (v *NullableRoutePatchTasks) Set(val *RoutePatchTasks) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutePatchTasks) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutePatchTasks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutePatchTasks(val *RoutePatchTasks) *NullableRoutePatchTasks {
	return &NullableRoutePatchTasks{value: val, isSet: true}
}

func (v NullableRoutePatchTasks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutePatchTasks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


