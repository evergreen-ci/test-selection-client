/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelAPIParsleyFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAPIParsleyFilter{}

// ModelAPIParsleyFilter struct for ModelAPIParsleyFilter
type ModelAPIParsleyFilter struct {
	// CaseSensitive indicates whether the filter is case sensitive.
	CaseSensitive *bool `json:"case_sensitive,omitempty"`
	// ExactMatch indicates whether the filter must be an exact match.
	ExactMatch *bool `json:"exact_match,omitempty"`
	// Expression is a regular expression representing the filter.
	Expression *string `json:"expression,omitempty"`
}

// NewModelAPIParsleyFilter instantiates a new ModelAPIParsleyFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAPIParsleyFilter() *ModelAPIParsleyFilter {
	this := ModelAPIParsleyFilter{}
	return &this
}

// NewModelAPIParsleyFilterWithDefaults instantiates a new ModelAPIParsleyFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAPIParsleyFilterWithDefaults() *ModelAPIParsleyFilter {
	this := ModelAPIParsleyFilter{}
	return &this
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *ModelAPIParsleyFilter) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIParsleyFilter) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *ModelAPIParsleyFilter) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *ModelAPIParsleyFilter) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetExactMatch returns the ExactMatch field value if set, zero value otherwise.
func (o *ModelAPIParsleyFilter) GetExactMatch() bool {
	if o == nil || IsNil(o.ExactMatch) {
		var ret bool
		return ret
	}
	return *o.ExactMatch
}

// GetExactMatchOk returns a tuple with the ExactMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIParsleyFilter) GetExactMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.ExactMatch) {
		return nil, false
	}
	return o.ExactMatch, true
}

// HasExactMatch returns a boolean if a field has been set.
func (o *ModelAPIParsleyFilter) HasExactMatch() bool {
	if o != nil && !IsNil(o.ExactMatch) {
		return true
	}

	return false
}

// SetExactMatch gets a reference to the given bool and assigns it to the ExactMatch field.
func (o *ModelAPIParsleyFilter) SetExactMatch(v bool) {
	o.ExactMatch = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *ModelAPIParsleyFilter) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIParsleyFilter) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *ModelAPIParsleyFilter) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *ModelAPIParsleyFilter) SetExpression(v string) {
	o.Expression = &v
}

func (o ModelAPIParsleyFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAPIParsleyFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaseSensitive) {
		toSerialize["case_sensitive"] = o.CaseSensitive
	}
	if !IsNil(o.ExactMatch) {
		toSerialize["exact_match"] = o.ExactMatch
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	return toSerialize, nil
}

type NullableModelAPIParsleyFilter struct {
	value *ModelAPIParsleyFilter
	isSet bool
}

func (v NullableModelAPIParsleyFilter) Get() *ModelAPIParsleyFilter {
	return v.value
}

func (v *NullableModelAPIParsleyFilter) Set(val *ModelAPIParsleyFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAPIParsleyFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAPIParsleyFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAPIParsleyFilter(val *ModelAPIParsleyFilter) *NullableModelAPIParsleyFilter {
	return &NullableModelAPIParsleyFilter{value: val, isSet: true}
}

func (v NullableModelAPIParsleyFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAPIParsleyFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


