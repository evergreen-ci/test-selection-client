/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelVariantTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelVariantTask{}

// ModelVariantTask struct for ModelVariantTask
type ModelVariantTask struct {
	// Name of build variant
	Name *string `json:"name,omitempty"`
	// All tasks available to run on this build variant
	Tasks []string `json:"tasks,omitempty"`
}

// NewModelVariantTask instantiates a new ModelVariantTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelVariantTask() *ModelVariantTask {
	this := ModelVariantTask{}
	return &this
}

// NewModelVariantTaskWithDefaults instantiates a new ModelVariantTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelVariantTaskWithDefaults() *ModelVariantTask {
	this := ModelVariantTask{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelVariantTask) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVariantTask) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelVariantTask) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelVariantTask) SetName(v string) {
	o.Name = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ModelVariantTask) GetTasks() []string {
	if o == nil || IsNil(o.Tasks) {
		var ret []string
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVariantTask) GetTasksOk() ([]string, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ModelVariantTask) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []string and assigns it to the Tasks field.
func (o *ModelVariantTask) SetTasks(v []string) {
	o.Tasks = v
}

func (o ModelVariantTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelVariantTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	return toSerialize, nil
}

type NullableModelVariantTask struct {
	value *ModelVariantTask
	isSet bool
}

func (v NullableModelVariantTask) Get() *ModelVariantTask {
	return v.value
}

func (v *NullableModelVariantTask) Set(val *ModelVariantTask) {
	v.value = val
	v.isSet = true
}

func (v NullableModelVariantTask) IsSet() bool {
	return v.isSet
}

func (v *NullableModelVariantTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelVariantTask(val *ModelVariantTask) *NullableModelVariantTask {
	return &NullableModelVariantTask{value: val, isSet: true}
}

func (v NullableModelVariantTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelVariantTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


