/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelAPINote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAPINote{}

// ModelAPINote struct for ModelAPINote
type ModelAPINote struct {
	// Comment about the task failure
	Message *string `json:"message,omitempty"`
	// The source of the note
	Source *ModelAPISource `json:"source,omitempty"`
}

// NewModelAPINote instantiates a new ModelAPINote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAPINote() *ModelAPINote {
	this := ModelAPINote{}
	return &this
}

// NewModelAPINoteWithDefaults instantiates a new ModelAPINote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAPINoteWithDefaults() *ModelAPINote {
	this := ModelAPINote{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ModelAPINote) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPINote) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ModelAPINote) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ModelAPINote) SetMessage(v string) {
	o.Message = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ModelAPINote) GetSource() ModelAPISource {
	if o == nil || IsNil(o.Source) {
		var ret ModelAPISource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPINote) GetSourceOk() (*ModelAPISource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ModelAPINote) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given ModelAPISource and assigns it to the Source field.
func (o *ModelAPINote) SetSource(v ModelAPISource) {
	o.Source = &v
}

func (o ModelAPINote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAPINote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

type NullableModelAPINote struct {
	value *ModelAPINote
	isSet bool
}

func (v NullableModelAPINote) Get() *ModelAPINote {
	return v.value
}

func (v *NullableModelAPINote) Set(val *ModelAPINote) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAPINote) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAPINote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAPINote(val *ModelAPINote) *NullableModelAPINote {
	return &NullableModelAPINote{value: val, isSet: true}
}

func (v NullableModelAPINote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAPINote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


