/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaskTaskStatusCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskTaskStatusCount{}

// TaskTaskStatusCount struct for TaskTaskStatusCount
type TaskTaskStatusCount struct {
	Dispatched *int32 `json:"dispatched,omitempty"`
	Failed *int32 `json:"failed,omitempty"`
	Inactive *int32 `json:"inactive,omitempty"`
	Started *int32 `json:"started,omitempty"`
	Succeeded *int32 `json:"succeeded,omitempty"`
	TimedOut *int32 `json:"timed_out,omitempty"`
	Undispatched *int32 `json:"undispatched,omitempty"`
}

// NewTaskTaskStatusCount instantiates a new TaskTaskStatusCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskTaskStatusCount() *TaskTaskStatusCount {
	this := TaskTaskStatusCount{}
	return &this
}

// NewTaskTaskStatusCountWithDefaults instantiates a new TaskTaskStatusCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskTaskStatusCountWithDefaults() *TaskTaskStatusCount {
	this := TaskTaskStatusCount{}
	return &this
}

// GetDispatched returns the Dispatched field value if set, zero value otherwise.
func (o *TaskTaskStatusCount) GetDispatched() int32 {
	if o == nil || IsNil(o.Dispatched) {
		var ret int32
		return ret
	}
	return *o.Dispatched
}

// GetDispatchedOk returns a tuple with the Dispatched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTaskStatusCount) GetDispatchedOk() (*int32, bool) {
	if o == nil || IsNil(o.Dispatched) {
		return nil, false
	}
	return o.Dispatched, true
}

// HasDispatched returns a boolean if a field has been set.
func (o *TaskTaskStatusCount) HasDispatched() bool {
	if o != nil && !IsNil(o.Dispatched) {
		return true
	}

	return false
}

// SetDispatched gets a reference to the given int32 and assigns it to the Dispatched field.
func (o *TaskTaskStatusCount) SetDispatched(v int32) {
	o.Dispatched = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *TaskTaskStatusCount) GetFailed() int32 {
	if o == nil || IsNil(o.Failed) {
		var ret int32
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTaskStatusCount) GetFailedOk() (*int32, bool) {
	if o == nil || IsNil(o.Failed) {
		return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *TaskTaskStatusCount) HasFailed() bool {
	if o != nil && !IsNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given int32 and assigns it to the Failed field.
func (o *TaskTaskStatusCount) SetFailed(v int32) {
	o.Failed = &v
}

// GetInactive returns the Inactive field value if set, zero value otherwise.
func (o *TaskTaskStatusCount) GetInactive() int32 {
	if o == nil || IsNil(o.Inactive) {
		var ret int32
		return ret
	}
	return *o.Inactive
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTaskStatusCount) GetInactiveOk() (*int32, bool) {
	if o == nil || IsNil(o.Inactive) {
		return nil, false
	}
	return o.Inactive, true
}

// HasInactive returns a boolean if a field has been set.
func (o *TaskTaskStatusCount) HasInactive() bool {
	if o != nil && !IsNil(o.Inactive) {
		return true
	}

	return false
}

// SetInactive gets a reference to the given int32 and assigns it to the Inactive field.
func (o *TaskTaskStatusCount) SetInactive(v int32) {
	o.Inactive = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *TaskTaskStatusCount) GetStarted() int32 {
	if o == nil || IsNil(o.Started) {
		var ret int32
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTaskStatusCount) GetStartedOk() (*int32, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *TaskTaskStatusCount) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given int32 and assigns it to the Started field.
func (o *TaskTaskStatusCount) SetStarted(v int32) {
	o.Started = &v
}

// GetSucceeded returns the Succeeded field value if set, zero value otherwise.
func (o *TaskTaskStatusCount) GetSucceeded() int32 {
	if o == nil || IsNil(o.Succeeded) {
		var ret int32
		return ret
	}
	return *o.Succeeded
}

// GetSucceededOk returns a tuple with the Succeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTaskStatusCount) GetSucceededOk() (*int32, bool) {
	if o == nil || IsNil(o.Succeeded) {
		return nil, false
	}
	return o.Succeeded, true
}

// HasSucceeded returns a boolean if a field has been set.
func (o *TaskTaskStatusCount) HasSucceeded() bool {
	if o != nil && !IsNil(o.Succeeded) {
		return true
	}

	return false
}

// SetSucceeded gets a reference to the given int32 and assigns it to the Succeeded field.
func (o *TaskTaskStatusCount) SetSucceeded(v int32) {
	o.Succeeded = &v
}

// GetTimedOut returns the TimedOut field value if set, zero value otherwise.
func (o *TaskTaskStatusCount) GetTimedOut() int32 {
	if o == nil || IsNil(o.TimedOut) {
		var ret int32
		return ret
	}
	return *o.TimedOut
}

// GetTimedOutOk returns a tuple with the TimedOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTaskStatusCount) GetTimedOutOk() (*int32, bool) {
	if o == nil || IsNil(o.TimedOut) {
		return nil, false
	}
	return o.TimedOut, true
}

// HasTimedOut returns a boolean if a field has been set.
func (o *TaskTaskStatusCount) HasTimedOut() bool {
	if o != nil && !IsNil(o.TimedOut) {
		return true
	}

	return false
}

// SetTimedOut gets a reference to the given int32 and assigns it to the TimedOut field.
func (o *TaskTaskStatusCount) SetTimedOut(v int32) {
	o.TimedOut = &v
}

// GetUndispatched returns the Undispatched field value if set, zero value otherwise.
func (o *TaskTaskStatusCount) GetUndispatched() int32 {
	if o == nil || IsNil(o.Undispatched) {
		var ret int32
		return ret
	}
	return *o.Undispatched
}

// GetUndispatchedOk returns a tuple with the Undispatched field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskTaskStatusCount) GetUndispatchedOk() (*int32, bool) {
	if o == nil || IsNil(o.Undispatched) {
		return nil, false
	}
	return o.Undispatched, true
}

// HasUndispatched returns a boolean if a field has been set.
func (o *TaskTaskStatusCount) HasUndispatched() bool {
	if o != nil && !IsNil(o.Undispatched) {
		return true
	}

	return false
}

// SetUndispatched gets a reference to the given int32 and assigns it to the Undispatched field.
func (o *TaskTaskStatusCount) SetUndispatched(v int32) {
	o.Undispatched = &v
}

func (o TaskTaskStatusCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskTaskStatusCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dispatched) {
		toSerialize["dispatched"] = o.Dispatched
	}
	if !IsNil(o.Failed) {
		toSerialize["failed"] = o.Failed
	}
	if !IsNil(o.Inactive) {
		toSerialize["inactive"] = o.Inactive
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.Succeeded) {
		toSerialize["succeeded"] = o.Succeeded
	}
	if !IsNil(o.TimedOut) {
		toSerialize["timed_out"] = o.TimedOut
	}
	if !IsNil(o.Undispatched) {
		toSerialize["undispatched"] = o.Undispatched
	}
	return toSerialize, nil
}

type NullableTaskTaskStatusCount struct {
	value *TaskTaskStatusCount
	isSet bool
}

func (v NullableTaskTaskStatusCount) Get() *TaskTaskStatusCount {
	return v.value
}

func (v *NullableTaskTaskStatusCount) Set(val *TaskTaskStatusCount) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskTaskStatusCount) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskTaskStatusCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskTaskStatusCount(val *TaskTaskStatusCount) *NullableTaskTaskStatusCount {
	return &NullableTaskTaskStatusCount{value: val, isSet: true}
}

func (v NullableTaskTaskStatusCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskTaskStatusCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


