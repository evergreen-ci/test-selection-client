/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelAPIProjectRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAPIProjectRef{}

// ModelAPIProjectRef struct for ModelAPIProjectRef
type ModelAPIProjectRef struct {
	// Usernames of project admins. Can be null for some projects (EVG-6598).
	Admins []string `json:"admins,omitempty"`
	// List of aliases for the project.
	Aliases []ModelAPIProjectAlias `json:"aliases,omitempty"`
	// Options for banner to display for the project.
	Banner *ModelAPIProjectBanner `json:"banner,omitempty"`
	// Time interval between commits for Evergreen to activate.
	BatchTime *int32 `json:"batch_time,omitempty"`
	// Name of tracking branch.
	BranchName *string `json:"branch_name,omitempty"`
	// Options for Build Baron.
	BuildBaronSettings *ModelAPIBuildBaronSettings `json:"build_baron_settings,omitempty"`
	// Options for commit queue.
	CommitQueue *ModelAPICommitQueueParams `json:"commit_queue,omitempty"`
	// List of container secrets.
	ContainerSecrets []ModelAPIContainerSecret `json:"container_secrets,omitempty"`
	// List of container size definitions
	ContainerSizeDefinitions []ModelAPIContainerResources `json:"container_size_definitions,omitempty"`
	// List of identifiers of tasks used in this patch.
	DeactivatePrevious *bool `json:"deactivate_previous,omitempty"`
	// Usernames of project admins to remove.
	DeleteAdmins []string `json:"delete_admins,omitempty"`
	// Names of container secrets to be deleted.
	DeleteContainerSecrets []string `json:"delete_container_secrets,omitempty"`
	// Names of GitHub teams authorized to submit git tag versions to remove.
	DeleteGitTagAuthorizedTeams []string `json:"delete_git_tag_authorized_teams,omitempty"`
	// Usernames of git tag-authorized users to remove.
	DeleteGitTagAuthorizedUsers []string `json:"delete_git_tag_authorized_users,omitempty"`
	// IDs of subscriptions to delete.
	DeleteSubscriptions []string `json:"delete_subscriptions,omitempty"`
	// Disable stats caching.
	DisabledStatsCache *bool `json:"disabled_stats_cache,omitempty"`
	// Disable task dispatching.
	DispatchingDisabled *bool `json:"dispatching_disabled,omitempty"`
	// Project name displayed to users.
	DisplayName *string `json:"display_name,omitempty"`
	// Whether evergreen is enabled for this project.
	Enabled *bool `json:"enabled,omitempty"`
	// List of external links in the version metadata.
	ExternalLinks []ModelAPIExternalLink `json:"external_links,omitempty"`
	// Names of GitHub teams authorized to submit git tag versions.
	GitTagAuthorizedTeams []string `json:"git_tag_authorized_teams,omitempty"`
	// Usernames authorized to submit git tag versions.
	GitTagAuthorizedUsers []string `json:"git_tag_authorized_users,omitempty"`
	// Enable testing when git tags are pushed.
	GitTagVersionsEnabled *bool `json:"git_tag_versions_enabled,omitempty"`
	// Enable GitHub checks.
	GithubChecksEnabled *bool `json:"github_checks_enabled,omitempty"`
	// List of GitHub permission groups.
	GithubDynamicTokenPermissionGroups []ModelAPIGitHubDynamicTokenPermissionGroup `json:"github_dynamic_token_permission_groups,omitempty"`
	// GitHub permission group by requester.
	GithubPermissionGroupByRequester *map[string]string `json:"github_permission_group_by_requester,omitempty"`
	// List of GitHub trigger aliases.
	GithubTriggerAliases []string `json:"github_trigger_aliases,omitempty"`
	// Whether or not the project can be seen in the UI. Cannot be modified by users.
	Hidden *bool `json:"hidden,omitempty"`
	Id *string `json:"id,omitempty"`
	// Internal evergreen identifier for project.
	Identifier *string `json:"identifier,omitempty"`
	// Enable GitHub manual pull request testing.
	ManualPrTestingEnabled *bool `json:"manual_pr_testing_enabled,omitempty"`
	// Notify original committer (or admins) when build fails.
	NotifyOnFailure *bool `json:"notify_on_failure,omitempty"`
	// Oldest allowed merge base for PR patches
	OldestAllowedMergeBase *string `json:"oldest_allowed_merge_base,omitempty"`
	// GitHub org name.
	OwnerName *string `json:"owner_name,omitempty"`
	// List of custom Parsley filters.
	ParsleyFilters []ModelAPIParsleyFilter `json:"parsley_filters,omitempty"`
	// List of patch trigger aliases.
	PatchTriggerAliases []ModelAPIPatchTriggerDefinition `json:"patch_trigger_aliases,omitempty"`
	// Disable patching.
	PatchingDisabled *bool `json:"patching_disabled,omitempty"`
	// Enable the performance plugin.
	PerfEnabled *bool `json:"perf_enabled,omitempty"`
	// List of periodic build definitions.
	PeriodicBuilds []ModelAPIPeriodicBuildDefinition `json:"periodic_builds,omitempty"`
	// Enable GitHub automated pull request testing.
	PrTestingEnabled *bool `json:"pr_testing_enabled,omitempty"`
	// Default project health view.
	ProjectHealthView *ModelProjectHealthView `json:"project_health_view,omitempty"`
	// Path to config file in repo.
	RemotePath *string `json:"remote_path,omitempty"`
	// GitHub repository name.
	RepoName *string `json:"repo_name,omitempty"`
	// Identifier of the attached repo ref. Cannot be modified by users.
	RepoRefId *string `json:"repo_ref_id,omitempty"`
	// Disable the repotracker.
	RepotrackerDisabled *bool `json:"repotracker_disabled,omitempty"`
	// Error from the repotracker, if any. Cannot be modified by users.
	RepotrackerError *ModelAPIRepositoryErrorDetails `json:"repotracker_error,omitempty"`
	// Prevent users from being able to view this project unless explicitly granted access.
	Restricted *bool `json:"restricted,omitempty"`
	// Only used when modifying projects to change the base revision and run the repotracker.
	Revision *string `json:"revision,omitempty"`
	// File path to script that users can run on spawn hosts loaded with task data.
	SpawnHostScriptPath *string `json:"spawn_host_script_path,omitempty"`
	// Use bisect stepback instead of linear.
	StepbackBisect *bool `json:"stepback_bisect,omitempty"`
	// Disable stepback.
	StepbackDisabled *bool `json:"stepback_disabled,omitempty"`
	// List of subscriptions for the project.
	Subscriptions []ModelAPISubscription `json:"subscriptions,omitempty"`
	// Options for task annotations.
	TaskAnnotationSettings *ModelAPITaskAnnotationSettings `json:"task_annotation_settings,omitempty"`
	// If true, repotracker is run on github push events. If false, repotracker is run periodically every few minutes.
	TracksPushEvents *bool `json:"tracks_push_events,omitempty"`
	// List of triggers for the project.
	Triggers []ModelAPITriggerDefinition `json:"triggers,omitempty"`
	// Whether or not to default to using repo settings.
	UseRepoSettings *bool `json:"use_repo_settings,omitempty"`
	// Project variables information
	Variables *ModelAPIProjectVars `json:"variables,omitempty"`
	// Enable setting project aliases from version-controlled project configs.
	VersionControlEnabled *bool `json:"version_control_enabled,omitempty"`
	// Options for workstations.
	WorkstationConfig *ModelAPIWorkstationConfig `json:"workstation_config,omitempty"`
}

// NewModelAPIProjectRef instantiates a new ModelAPIProjectRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAPIProjectRef() *ModelAPIProjectRef {
	this := ModelAPIProjectRef{}
	return &this
}

// NewModelAPIProjectRefWithDefaults instantiates a new ModelAPIProjectRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAPIProjectRefWithDefaults() *ModelAPIProjectRef {
	this := ModelAPIProjectRef{}
	return &this
}

// GetAdmins returns the Admins field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetAdmins() []string {
	if o == nil || IsNil(o.Admins) {
		var ret []string
		return ret
	}
	return o.Admins
}

// GetAdminsOk returns a tuple with the Admins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetAdminsOk() ([]string, bool) {
	if o == nil || IsNil(o.Admins) {
		return nil, false
	}
	return o.Admins, true
}

// HasAdmins returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasAdmins() bool {
	if o != nil && !IsNil(o.Admins) {
		return true
	}

	return false
}

// SetAdmins gets a reference to the given []string and assigns it to the Admins field.
func (o *ModelAPIProjectRef) SetAdmins(v []string) {
	o.Admins = v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetAliases() []ModelAPIProjectAlias {
	if o == nil || IsNil(o.Aliases) {
		var ret []ModelAPIProjectAlias
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetAliasesOk() ([]ModelAPIProjectAlias, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []ModelAPIProjectAlias and assigns it to the Aliases field.
func (o *ModelAPIProjectRef) SetAliases(v []ModelAPIProjectAlias) {
	o.Aliases = v
}

// GetBanner returns the Banner field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetBanner() ModelAPIProjectBanner {
	if o == nil || IsNil(o.Banner) {
		var ret ModelAPIProjectBanner
		return ret
	}
	return *o.Banner
}

// GetBannerOk returns a tuple with the Banner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetBannerOk() (*ModelAPIProjectBanner, bool) {
	if o == nil || IsNil(o.Banner) {
		return nil, false
	}
	return o.Banner, true
}

// HasBanner returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasBanner() bool {
	if o != nil && !IsNil(o.Banner) {
		return true
	}

	return false
}

// SetBanner gets a reference to the given ModelAPIProjectBanner and assigns it to the Banner field.
func (o *ModelAPIProjectRef) SetBanner(v ModelAPIProjectBanner) {
	o.Banner = &v
}

// GetBatchTime returns the BatchTime field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetBatchTime() int32 {
	if o == nil || IsNil(o.BatchTime) {
		var ret int32
		return ret
	}
	return *o.BatchTime
}

// GetBatchTimeOk returns a tuple with the BatchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetBatchTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.BatchTime) {
		return nil, false
	}
	return o.BatchTime, true
}

// HasBatchTime returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasBatchTime() bool {
	if o != nil && !IsNil(o.BatchTime) {
		return true
	}

	return false
}

// SetBatchTime gets a reference to the given int32 and assigns it to the BatchTime field.
func (o *ModelAPIProjectRef) SetBatchTime(v int32) {
	o.BatchTime = &v
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetBranchName() string {
	if o == nil || IsNil(o.BranchName) {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetBranchNameOk() (*string, bool) {
	if o == nil || IsNil(o.BranchName) {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasBranchName() bool {
	if o != nil && !IsNil(o.BranchName) {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *ModelAPIProjectRef) SetBranchName(v string) {
	o.BranchName = &v
}

// GetBuildBaronSettings returns the BuildBaronSettings field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetBuildBaronSettings() ModelAPIBuildBaronSettings {
	if o == nil || IsNil(o.BuildBaronSettings) {
		var ret ModelAPIBuildBaronSettings
		return ret
	}
	return *o.BuildBaronSettings
}

// GetBuildBaronSettingsOk returns a tuple with the BuildBaronSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetBuildBaronSettingsOk() (*ModelAPIBuildBaronSettings, bool) {
	if o == nil || IsNil(o.BuildBaronSettings) {
		return nil, false
	}
	return o.BuildBaronSettings, true
}

// HasBuildBaronSettings returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasBuildBaronSettings() bool {
	if o != nil && !IsNil(o.BuildBaronSettings) {
		return true
	}

	return false
}

// SetBuildBaronSettings gets a reference to the given ModelAPIBuildBaronSettings and assigns it to the BuildBaronSettings field.
func (o *ModelAPIProjectRef) SetBuildBaronSettings(v ModelAPIBuildBaronSettings) {
	o.BuildBaronSettings = &v
}

// GetCommitQueue returns the CommitQueue field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetCommitQueue() ModelAPICommitQueueParams {
	if o == nil || IsNil(o.CommitQueue) {
		var ret ModelAPICommitQueueParams
		return ret
	}
	return *o.CommitQueue
}

// GetCommitQueueOk returns a tuple with the CommitQueue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetCommitQueueOk() (*ModelAPICommitQueueParams, bool) {
	if o == nil || IsNil(o.CommitQueue) {
		return nil, false
	}
	return o.CommitQueue, true
}

// HasCommitQueue returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasCommitQueue() bool {
	if o != nil && !IsNil(o.CommitQueue) {
		return true
	}

	return false
}

// SetCommitQueue gets a reference to the given ModelAPICommitQueueParams and assigns it to the CommitQueue field.
func (o *ModelAPIProjectRef) SetCommitQueue(v ModelAPICommitQueueParams) {
	o.CommitQueue = &v
}

// GetContainerSecrets returns the ContainerSecrets field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetContainerSecrets() []ModelAPIContainerSecret {
	if o == nil || IsNil(o.ContainerSecrets) {
		var ret []ModelAPIContainerSecret
		return ret
	}
	return o.ContainerSecrets
}

// GetContainerSecretsOk returns a tuple with the ContainerSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetContainerSecretsOk() ([]ModelAPIContainerSecret, bool) {
	if o == nil || IsNil(o.ContainerSecrets) {
		return nil, false
	}
	return o.ContainerSecrets, true
}

// HasContainerSecrets returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasContainerSecrets() bool {
	if o != nil && !IsNil(o.ContainerSecrets) {
		return true
	}

	return false
}

// SetContainerSecrets gets a reference to the given []ModelAPIContainerSecret and assigns it to the ContainerSecrets field.
func (o *ModelAPIProjectRef) SetContainerSecrets(v []ModelAPIContainerSecret) {
	o.ContainerSecrets = v
}

// GetContainerSizeDefinitions returns the ContainerSizeDefinitions field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetContainerSizeDefinitions() []ModelAPIContainerResources {
	if o == nil || IsNil(o.ContainerSizeDefinitions) {
		var ret []ModelAPIContainerResources
		return ret
	}
	return o.ContainerSizeDefinitions
}

// GetContainerSizeDefinitionsOk returns a tuple with the ContainerSizeDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetContainerSizeDefinitionsOk() ([]ModelAPIContainerResources, bool) {
	if o == nil || IsNil(o.ContainerSizeDefinitions) {
		return nil, false
	}
	return o.ContainerSizeDefinitions, true
}

// HasContainerSizeDefinitions returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasContainerSizeDefinitions() bool {
	if o != nil && !IsNil(o.ContainerSizeDefinitions) {
		return true
	}

	return false
}

// SetContainerSizeDefinitions gets a reference to the given []ModelAPIContainerResources and assigns it to the ContainerSizeDefinitions field.
func (o *ModelAPIProjectRef) SetContainerSizeDefinitions(v []ModelAPIContainerResources) {
	o.ContainerSizeDefinitions = v
}

// GetDeactivatePrevious returns the DeactivatePrevious field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDeactivatePrevious() bool {
	if o == nil || IsNil(o.DeactivatePrevious) {
		var ret bool
		return ret
	}
	return *o.DeactivatePrevious
}

// GetDeactivatePreviousOk returns a tuple with the DeactivatePrevious field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDeactivatePreviousOk() (*bool, bool) {
	if o == nil || IsNil(o.DeactivatePrevious) {
		return nil, false
	}
	return o.DeactivatePrevious, true
}

// HasDeactivatePrevious returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDeactivatePrevious() bool {
	if o != nil && !IsNil(o.DeactivatePrevious) {
		return true
	}

	return false
}

// SetDeactivatePrevious gets a reference to the given bool and assigns it to the DeactivatePrevious field.
func (o *ModelAPIProjectRef) SetDeactivatePrevious(v bool) {
	o.DeactivatePrevious = &v
}

// GetDeleteAdmins returns the DeleteAdmins field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDeleteAdmins() []string {
	if o == nil || IsNil(o.DeleteAdmins) {
		var ret []string
		return ret
	}
	return o.DeleteAdmins
}

// GetDeleteAdminsOk returns a tuple with the DeleteAdmins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDeleteAdminsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeleteAdmins) {
		return nil, false
	}
	return o.DeleteAdmins, true
}

// HasDeleteAdmins returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDeleteAdmins() bool {
	if o != nil && !IsNil(o.DeleteAdmins) {
		return true
	}

	return false
}

// SetDeleteAdmins gets a reference to the given []string and assigns it to the DeleteAdmins field.
func (o *ModelAPIProjectRef) SetDeleteAdmins(v []string) {
	o.DeleteAdmins = v
}

// GetDeleteContainerSecrets returns the DeleteContainerSecrets field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDeleteContainerSecrets() []string {
	if o == nil || IsNil(o.DeleteContainerSecrets) {
		var ret []string
		return ret
	}
	return o.DeleteContainerSecrets
}

// GetDeleteContainerSecretsOk returns a tuple with the DeleteContainerSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDeleteContainerSecretsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeleteContainerSecrets) {
		return nil, false
	}
	return o.DeleteContainerSecrets, true
}

// HasDeleteContainerSecrets returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDeleteContainerSecrets() bool {
	if o != nil && !IsNil(o.DeleteContainerSecrets) {
		return true
	}

	return false
}

// SetDeleteContainerSecrets gets a reference to the given []string and assigns it to the DeleteContainerSecrets field.
func (o *ModelAPIProjectRef) SetDeleteContainerSecrets(v []string) {
	o.DeleteContainerSecrets = v
}

// GetDeleteGitTagAuthorizedTeams returns the DeleteGitTagAuthorizedTeams field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDeleteGitTagAuthorizedTeams() []string {
	if o == nil || IsNil(o.DeleteGitTagAuthorizedTeams) {
		var ret []string
		return ret
	}
	return o.DeleteGitTagAuthorizedTeams
}

// GetDeleteGitTagAuthorizedTeamsOk returns a tuple with the DeleteGitTagAuthorizedTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDeleteGitTagAuthorizedTeamsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeleteGitTagAuthorizedTeams) {
		return nil, false
	}
	return o.DeleteGitTagAuthorizedTeams, true
}

// HasDeleteGitTagAuthorizedTeams returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDeleteGitTagAuthorizedTeams() bool {
	if o != nil && !IsNil(o.DeleteGitTagAuthorizedTeams) {
		return true
	}

	return false
}

// SetDeleteGitTagAuthorizedTeams gets a reference to the given []string and assigns it to the DeleteGitTagAuthorizedTeams field.
func (o *ModelAPIProjectRef) SetDeleteGitTagAuthorizedTeams(v []string) {
	o.DeleteGitTagAuthorizedTeams = v
}

// GetDeleteGitTagAuthorizedUsers returns the DeleteGitTagAuthorizedUsers field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDeleteGitTagAuthorizedUsers() []string {
	if o == nil || IsNil(o.DeleteGitTagAuthorizedUsers) {
		var ret []string
		return ret
	}
	return o.DeleteGitTagAuthorizedUsers
}

// GetDeleteGitTagAuthorizedUsersOk returns a tuple with the DeleteGitTagAuthorizedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDeleteGitTagAuthorizedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.DeleteGitTagAuthorizedUsers) {
		return nil, false
	}
	return o.DeleteGitTagAuthorizedUsers, true
}

// HasDeleteGitTagAuthorizedUsers returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDeleteGitTagAuthorizedUsers() bool {
	if o != nil && !IsNil(o.DeleteGitTagAuthorizedUsers) {
		return true
	}

	return false
}

// SetDeleteGitTagAuthorizedUsers gets a reference to the given []string and assigns it to the DeleteGitTagAuthorizedUsers field.
func (o *ModelAPIProjectRef) SetDeleteGitTagAuthorizedUsers(v []string) {
	o.DeleteGitTagAuthorizedUsers = v
}

// GetDeleteSubscriptions returns the DeleteSubscriptions field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDeleteSubscriptions() []string {
	if o == nil || IsNil(o.DeleteSubscriptions) {
		var ret []string
		return ret
	}
	return o.DeleteSubscriptions
}

// GetDeleteSubscriptionsOk returns a tuple with the DeleteSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDeleteSubscriptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeleteSubscriptions) {
		return nil, false
	}
	return o.DeleteSubscriptions, true
}

// HasDeleteSubscriptions returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDeleteSubscriptions() bool {
	if o != nil && !IsNil(o.DeleteSubscriptions) {
		return true
	}

	return false
}

// SetDeleteSubscriptions gets a reference to the given []string and assigns it to the DeleteSubscriptions field.
func (o *ModelAPIProjectRef) SetDeleteSubscriptions(v []string) {
	o.DeleteSubscriptions = v
}

// GetDisabledStatsCache returns the DisabledStatsCache field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDisabledStatsCache() bool {
	if o == nil || IsNil(o.DisabledStatsCache) {
		var ret bool
		return ret
	}
	return *o.DisabledStatsCache
}

// GetDisabledStatsCacheOk returns a tuple with the DisabledStatsCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDisabledStatsCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.DisabledStatsCache) {
		return nil, false
	}
	return o.DisabledStatsCache, true
}

// HasDisabledStatsCache returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDisabledStatsCache() bool {
	if o != nil && !IsNil(o.DisabledStatsCache) {
		return true
	}

	return false
}

// SetDisabledStatsCache gets a reference to the given bool and assigns it to the DisabledStatsCache field.
func (o *ModelAPIProjectRef) SetDisabledStatsCache(v bool) {
	o.DisabledStatsCache = &v
}

// GetDispatchingDisabled returns the DispatchingDisabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDispatchingDisabled() bool {
	if o == nil || IsNil(o.DispatchingDisabled) {
		var ret bool
		return ret
	}
	return *o.DispatchingDisabled
}

// GetDispatchingDisabledOk returns a tuple with the DispatchingDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDispatchingDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DispatchingDisabled) {
		return nil, false
	}
	return o.DispatchingDisabled, true
}

// HasDispatchingDisabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDispatchingDisabled() bool {
	if o != nil && !IsNil(o.DispatchingDisabled) {
		return true
	}

	return false
}

// SetDispatchingDisabled gets a reference to the given bool and assigns it to the DispatchingDisabled field.
func (o *ModelAPIProjectRef) SetDispatchingDisabled(v bool) {
	o.DispatchingDisabled = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ModelAPIProjectRef) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ModelAPIProjectRef) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetExternalLinks returns the ExternalLinks field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetExternalLinks() []ModelAPIExternalLink {
	if o == nil || IsNil(o.ExternalLinks) {
		var ret []ModelAPIExternalLink
		return ret
	}
	return o.ExternalLinks
}

// GetExternalLinksOk returns a tuple with the ExternalLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetExternalLinksOk() ([]ModelAPIExternalLink, bool) {
	if o == nil || IsNil(o.ExternalLinks) {
		return nil, false
	}
	return o.ExternalLinks, true
}

// HasExternalLinks returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasExternalLinks() bool {
	if o != nil && !IsNil(o.ExternalLinks) {
		return true
	}

	return false
}

// SetExternalLinks gets a reference to the given []ModelAPIExternalLink and assigns it to the ExternalLinks field.
func (o *ModelAPIProjectRef) SetExternalLinks(v []ModelAPIExternalLink) {
	o.ExternalLinks = v
}

// GetGitTagAuthorizedTeams returns the GitTagAuthorizedTeams field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetGitTagAuthorizedTeams() []string {
	if o == nil || IsNil(o.GitTagAuthorizedTeams) {
		var ret []string
		return ret
	}
	return o.GitTagAuthorizedTeams
}

// GetGitTagAuthorizedTeamsOk returns a tuple with the GitTagAuthorizedTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetGitTagAuthorizedTeamsOk() ([]string, bool) {
	if o == nil || IsNil(o.GitTagAuthorizedTeams) {
		return nil, false
	}
	return o.GitTagAuthorizedTeams, true
}

// HasGitTagAuthorizedTeams returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasGitTagAuthorizedTeams() bool {
	if o != nil && !IsNil(o.GitTagAuthorizedTeams) {
		return true
	}

	return false
}

// SetGitTagAuthorizedTeams gets a reference to the given []string and assigns it to the GitTagAuthorizedTeams field.
func (o *ModelAPIProjectRef) SetGitTagAuthorizedTeams(v []string) {
	o.GitTagAuthorizedTeams = v
}

// GetGitTagAuthorizedUsers returns the GitTagAuthorizedUsers field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetGitTagAuthorizedUsers() []string {
	if o == nil || IsNil(o.GitTagAuthorizedUsers) {
		var ret []string
		return ret
	}
	return o.GitTagAuthorizedUsers
}

// GetGitTagAuthorizedUsersOk returns a tuple with the GitTagAuthorizedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetGitTagAuthorizedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.GitTagAuthorizedUsers) {
		return nil, false
	}
	return o.GitTagAuthorizedUsers, true
}

// HasGitTagAuthorizedUsers returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasGitTagAuthorizedUsers() bool {
	if o != nil && !IsNil(o.GitTagAuthorizedUsers) {
		return true
	}

	return false
}

// SetGitTagAuthorizedUsers gets a reference to the given []string and assigns it to the GitTagAuthorizedUsers field.
func (o *ModelAPIProjectRef) SetGitTagAuthorizedUsers(v []string) {
	o.GitTagAuthorizedUsers = v
}

// GetGitTagVersionsEnabled returns the GitTagVersionsEnabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetGitTagVersionsEnabled() bool {
	if o == nil || IsNil(o.GitTagVersionsEnabled) {
		var ret bool
		return ret
	}
	return *o.GitTagVersionsEnabled
}

// GetGitTagVersionsEnabledOk returns a tuple with the GitTagVersionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetGitTagVersionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GitTagVersionsEnabled) {
		return nil, false
	}
	return o.GitTagVersionsEnabled, true
}

// HasGitTagVersionsEnabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasGitTagVersionsEnabled() bool {
	if o != nil && !IsNil(o.GitTagVersionsEnabled) {
		return true
	}

	return false
}

// SetGitTagVersionsEnabled gets a reference to the given bool and assigns it to the GitTagVersionsEnabled field.
func (o *ModelAPIProjectRef) SetGitTagVersionsEnabled(v bool) {
	o.GitTagVersionsEnabled = &v
}

// GetGithubChecksEnabled returns the GithubChecksEnabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetGithubChecksEnabled() bool {
	if o == nil || IsNil(o.GithubChecksEnabled) {
		var ret bool
		return ret
	}
	return *o.GithubChecksEnabled
}

// GetGithubChecksEnabledOk returns a tuple with the GithubChecksEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetGithubChecksEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.GithubChecksEnabled) {
		return nil, false
	}
	return o.GithubChecksEnabled, true
}

// HasGithubChecksEnabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasGithubChecksEnabled() bool {
	if o != nil && !IsNil(o.GithubChecksEnabled) {
		return true
	}

	return false
}

// SetGithubChecksEnabled gets a reference to the given bool and assigns it to the GithubChecksEnabled field.
func (o *ModelAPIProjectRef) SetGithubChecksEnabled(v bool) {
	o.GithubChecksEnabled = &v
}

// GetGithubDynamicTokenPermissionGroups returns the GithubDynamicTokenPermissionGroups field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetGithubDynamicTokenPermissionGroups() []ModelAPIGitHubDynamicTokenPermissionGroup {
	if o == nil || IsNil(o.GithubDynamicTokenPermissionGroups) {
		var ret []ModelAPIGitHubDynamicTokenPermissionGroup
		return ret
	}
	return o.GithubDynamicTokenPermissionGroups
}

// GetGithubDynamicTokenPermissionGroupsOk returns a tuple with the GithubDynamicTokenPermissionGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetGithubDynamicTokenPermissionGroupsOk() ([]ModelAPIGitHubDynamicTokenPermissionGroup, bool) {
	if o == nil || IsNil(o.GithubDynamicTokenPermissionGroups) {
		return nil, false
	}
	return o.GithubDynamicTokenPermissionGroups, true
}

// HasGithubDynamicTokenPermissionGroups returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasGithubDynamicTokenPermissionGroups() bool {
	if o != nil && !IsNil(o.GithubDynamicTokenPermissionGroups) {
		return true
	}

	return false
}

// SetGithubDynamicTokenPermissionGroups gets a reference to the given []ModelAPIGitHubDynamicTokenPermissionGroup and assigns it to the GithubDynamicTokenPermissionGroups field.
func (o *ModelAPIProjectRef) SetGithubDynamicTokenPermissionGroups(v []ModelAPIGitHubDynamicTokenPermissionGroup) {
	o.GithubDynamicTokenPermissionGroups = v
}

// GetGithubPermissionGroupByRequester returns the GithubPermissionGroupByRequester field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetGithubPermissionGroupByRequester() map[string]string {
	if o == nil || IsNil(o.GithubPermissionGroupByRequester) {
		var ret map[string]string
		return ret
	}
	return *o.GithubPermissionGroupByRequester
}

// GetGithubPermissionGroupByRequesterOk returns a tuple with the GithubPermissionGroupByRequester field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetGithubPermissionGroupByRequesterOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.GithubPermissionGroupByRequester) {
		return nil, false
	}
	return o.GithubPermissionGroupByRequester, true
}

// HasGithubPermissionGroupByRequester returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasGithubPermissionGroupByRequester() bool {
	if o != nil && !IsNil(o.GithubPermissionGroupByRequester) {
		return true
	}

	return false
}

// SetGithubPermissionGroupByRequester gets a reference to the given map[string]string and assigns it to the GithubPermissionGroupByRequester field.
func (o *ModelAPIProjectRef) SetGithubPermissionGroupByRequester(v map[string]string) {
	o.GithubPermissionGroupByRequester = &v
}

// GetGithubTriggerAliases returns the GithubTriggerAliases field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetGithubTriggerAliases() []string {
	if o == nil || IsNil(o.GithubTriggerAliases) {
		var ret []string
		return ret
	}
	return o.GithubTriggerAliases
}

// GetGithubTriggerAliasesOk returns a tuple with the GithubTriggerAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetGithubTriggerAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.GithubTriggerAliases) {
		return nil, false
	}
	return o.GithubTriggerAliases, true
}

// HasGithubTriggerAliases returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasGithubTriggerAliases() bool {
	if o != nil && !IsNil(o.GithubTriggerAliases) {
		return true
	}

	return false
}

// SetGithubTriggerAliases gets a reference to the given []string and assigns it to the GithubTriggerAliases field.
func (o *ModelAPIProjectRef) SetGithubTriggerAliases(v []string) {
	o.GithubTriggerAliases = v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *ModelAPIProjectRef) SetHidden(v bool) {
	o.Hidden = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelAPIProjectRef) SetId(v string) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ModelAPIProjectRef) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetManualPrTestingEnabled returns the ManualPrTestingEnabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetManualPrTestingEnabled() bool {
	if o == nil || IsNil(o.ManualPrTestingEnabled) {
		var ret bool
		return ret
	}
	return *o.ManualPrTestingEnabled
}

// GetManualPrTestingEnabledOk returns a tuple with the ManualPrTestingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetManualPrTestingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ManualPrTestingEnabled) {
		return nil, false
	}
	return o.ManualPrTestingEnabled, true
}

// HasManualPrTestingEnabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasManualPrTestingEnabled() bool {
	if o != nil && !IsNil(o.ManualPrTestingEnabled) {
		return true
	}

	return false
}

// SetManualPrTestingEnabled gets a reference to the given bool and assigns it to the ManualPrTestingEnabled field.
func (o *ModelAPIProjectRef) SetManualPrTestingEnabled(v bool) {
	o.ManualPrTestingEnabled = &v
}

// GetNotifyOnFailure returns the NotifyOnFailure field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetNotifyOnFailure() bool {
	if o == nil || IsNil(o.NotifyOnFailure) {
		var ret bool
		return ret
	}
	return *o.NotifyOnFailure
}

// GetNotifyOnFailureOk returns a tuple with the NotifyOnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetNotifyOnFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyOnFailure) {
		return nil, false
	}
	return o.NotifyOnFailure, true
}

// HasNotifyOnFailure returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasNotifyOnFailure() bool {
	if o != nil && !IsNil(o.NotifyOnFailure) {
		return true
	}

	return false
}

// SetNotifyOnFailure gets a reference to the given bool and assigns it to the NotifyOnFailure field.
func (o *ModelAPIProjectRef) SetNotifyOnFailure(v bool) {
	o.NotifyOnFailure = &v
}

// GetOldestAllowedMergeBase returns the OldestAllowedMergeBase field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetOldestAllowedMergeBase() string {
	if o == nil || IsNil(o.OldestAllowedMergeBase) {
		var ret string
		return ret
	}
	return *o.OldestAllowedMergeBase
}

// GetOldestAllowedMergeBaseOk returns a tuple with the OldestAllowedMergeBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetOldestAllowedMergeBaseOk() (*string, bool) {
	if o == nil || IsNil(o.OldestAllowedMergeBase) {
		return nil, false
	}
	return o.OldestAllowedMergeBase, true
}

// HasOldestAllowedMergeBase returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasOldestAllowedMergeBase() bool {
	if o != nil && !IsNil(o.OldestAllowedMergeBase) {
		return true
	}

	return false
}

// SetOldestAllowedMergeBase gets a reference to the given string and assigns it to the OldestAllowedMergeBase field.
func (o *ModelAPIProjectRef) SetOldestAllowedMergeBase(v string) {
	o.OldestAllowedMergeBase = &v
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetOwnerName() string {
	if o == nil || IsNil(o.OwnerName) {
		var ret string
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasOwnerName() bool {
	if o != nil && !IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given string and assigns it to the OwnerName field.
func (o *ModelAPIProjectRef) SetOwnerName(v string) {
	o.OwnerName = &v
}

// GetParsleyFilters returns the ParsleyFilters field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetParsleyFilters() []ModelAPIParsleyFilter {
	if o == nil || IsNil(o.ParsleyFilters) {
		var ret []ModelAPIParsleyFilter
		return ret
	}
	return o.ParsleyFilters
}

// GetParsleyFiltersOk returns a tuple with the ParsleyFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetParsleyFiltersOk() ([]ModelAPIParsleyFilter, bool) {
	if o == nil || IsNil(o.ParsleyFilters) {
		return nil, false
	}
	return o.ParsleyFilters, true
}

// HasParsleyFilters returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasParsleyFilters() bool {
	if o != nil && !IsNil(o.ParsleyFilters) {
		return true
	}

	return false
}

// SetParsleyFilters gets a reference to the given []ModelAPIParsleyFilter and assigns it to the ParsleyFilters field.
func (o *ModelAPIProjectRef) SetParsleyFilters(v []ModelAPIParsleyFilter) {
	o.ParsleyFilters = v
}

// GetPatchTriggerAliases returns the PatchTriggerAliases field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetPatchTriggerAliases() []ModelAPIPatchTriggerDefinition {
	if o == nil || IsNil(o.PatchTriggerAliases) {
		var ret []ModelAPIPatchTriggerDefinition
		return ret
	}
	return o.PatchTriggerAliases
}

// GetPatchTriggerAliasesOk returns a tuple with the PatchTriggerAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetPatchTriggerAliasesOk() ([]ModelAPIPatchTriggerDefinition, bool) {
	if o == nil || IsNil(o.PatchTriggerAliases) {
		return nil, false
	}
	return o.PatchTriggerAliases, true
}

// HasPatchTriggerAliases returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasPatchTriggerAliases() bool {
	if o != nil && !IsNil(o.PatchTriggerAliases) {
		return true
	}

	return false
}

// SetPatchTriggerAliases gets a reference to the given []ModelAPIPatchTriggerDefinition and assigns it to the PatchTriggerAliases field.
func (o *ModelAPIProjectRef) SetPatchTriggerAliases(v []ModelAPIPatchTriggerDefinition) {
	o.PatchTriggerAliases = v
}

// GetPatchingDisabled returns the PatchingDisabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetPatchingDisabled() bool {
	if o == nil || IsNil(o.PatchingDisabled) {
		var ret bool
		return ret
	}
	return *o.PatchingDisabled
}

// GetPatchingDisabledOk returns a tuple with the PatchingDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetPatchingDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PatchingDisabled) {
		return nil, false
	}
	return o.PatchingDisabled, true
}

// HasPatchingDisabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasPatchingDisabled() bool {
	if o != nil && !IsNil(o.PatchingDisabled) {
		return true
	}

	return false
}

// SetPatchingDisabled gets a reference to the given bool and assigns it to the PatchingDisabled field.
func (o *ModelAPIProjectRef) SetPatchingDisabled(v bool) {
	o.PatchingDisabled = &v
}

// GetPerfEnabled returns the PerfEnabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetPerfEnabled() bool {
	if o == nil || IsNil(o.PerfEnabled) {
		var ret bool
		return ret
	}
	return *o.PerfEnabled
}

// GetPerfEnabledOk returns a tuple with the PerfEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetPerfEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PerfEnabled) {
		return nil, false
	}
	return o.PerfEnabled, true
}

// HasPerfEnabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasPerfEnabled() bool {
	if o != nil && !IsNil(o.PerfEnabled) {
		return true
	}

	return false
}

// SetPerfEnabled gets a reference to the given bool and assigns it to the PerfEnabled field.
func (o *ModelAPIProjectRef) SetPerfEnabled(v bool) {
	o.PerfEnabled = &v
}

// GetPeriodicBuilds returns the PeriodicBuilds field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetPeriodicBuilds() []ModelAPIPeriodicBuildDefinition {
	if o == nil || IsNil(o.PeriodicBuilds) {
		var ret []ModelAPIPeriodicBuildDefinition
		return ret
	}
	return o.PeriodicBuilds
}

// GetPeriodicBuildsOk returns a tuple with the PeriodicBuilds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetPeriodicBuildsOk() ([]ModelAPIPeriodicBuildDefinition, bool) {
	if o == nil || IsNil(o.PeriodicBuilds) {
		return nil, false
	}
	return o.PeriodicBuilds, true
}

// HasPeriodicBuilds returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasPeriodicBuilds() bool {
	if o != nil && !IsNil(o.PeriodicBuilds) {
		return true
	}

	return false
}

// SetPeriodicBuilds gets a reference to the given []ModelAPIPeriodicBuildDefinition and assigns it to the PeriodicBuilds field.
func (o *ModelAPIProjectRef) SetPeriodicBuilds(v []ModelAPIPeriodicBuildDefinition) {
	o.PeriodicBuilds = v
}

// GetPrTestingEnabled returns the PrTestingEnabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetPrTestingEnabled() bool {
	if o == nil || IsNil(o.PrTestingEnabled) {
		var ret bool
		return ret
	}
	return *o.PrTestingEnabled
}

// GetPrTestingEnabledOk returns a tuple with the PrTestingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetPrTestingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PrTestingEnabled) {
		return nil, false
	}
	return o.PrTestingEnabled, true
}

// HasPrTestingEnabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasPrTestingEnabled() bool {
	if o != nil && !IsNil(o.PrTestingEnabled) {
		return true
	}

	return false
}

// SetPrTestingEnabled gets a reference to the given bool and assigns it to the PrTestingEnabled field.
func (o *ModelAPIProjectRef) SetPrTestingEnabled(v bool) {
	o.PrTestingEnabled = &v
}

// GetProjectHealthView returns the ProjectHealthView field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetProjectHealthView() ModelProjectHealthView {
	if o == nil || IsNil(o.ProjectHealthView) {
		var ret ModelProjectHealthView
		return ret
	}
	return *o.ProjectHealthView
}

// GetProjectHealthViewOk returns a tuple with the ProjectHealthView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetProjectHealthViewOk() (*ModelProjectHealthView, bool) {
	if o == nil || IsNil(o.ProjectHealthView) {
		return nil, false
	}
	return o.ProjectHealthView, true
}

// HasProjectHealthView returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasProjectHealthView() bool {
	if o != nil && !IsNil(o.ProjectHealthView) {
		return true
	}

	return false
}

// SetProjectHealthView gets a reference to the given ModelProjectHealthView and assigns it to the ProjectHealthView field.
func (o *ModelAPIProjectRef) SetProjectHealthView(v ModelProjectHealthView) {
	o.ProjectHealthView = &v
}

// GetRemotePath returns the RemotePath field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetRemotePath() string {
	if o == nil || IsNil(o.RemotePath) {
		var ret string
		return ret
	}
	return *o.RemotePath
}

// GetRemotePathOk returns a tuple with the RemotePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetRemotePathOk() (*string, bool) {
	if o == nil || IsNil(o.RemotePath) {
		return nil, false
	}
	return o.RemotePath, true
}

// HasRemotePath returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasRemotePath() bool {
	if o != nil && !IsNil(o.RemotePath) {
		return true
	}

	return false
}

// SetRemotePath gets a reference to the given string and assigns it to the RemotePath field.
func (o *ModelAPIProjectRef) SetRemotePath(v string) {
	o.RemotePath = &v
}

// GetRepoName returns the RepoName field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetRepoName() string {
	if o == nil || IsNil(o.RepoName) {
		var ret string
		return ret
	}
	return *o.RepoName
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetRepoNameOk() (*string, bool) {
	if o == nil || IsNil(o.RepoName) {
		return nil, false
	}
	return o.RepoName, true
}

// HasRepoName returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasRepoName() bool {
	if o != nil && !IsNil(o.RepoName) {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given string and assigns it to the RepoName field.
func (o *ModelAPIProjectRef) SetRepoName(v string) {
	o.RepoName = &v
}

// GetRepoRefId returns the RepoRefId field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetRepoRefId() string {
	if o == nil || IsNil(o.RepoRefId) {
		var ret string
		return ret
	}
	return *o.RepoRefId
}

// GetRepoRefIdOk returns a tuple with the RepoRefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetRepoRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepoRefId) {
		return nil, false
	}
	return o.RepoRefId, true
}

// HasRepoRefId returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasRepoRefId() bool {
	if o != nil && !IsNil(o.RepoRefId) {
		return true
	}

	return false
}

// SetRepoRefId gets a reference to the given string and assigns it to the RepoRefId field.
func (o *ModelAPIProjectRef) SetRepoRefId(v string) {
	o.RepoRefId = &v
}

// GetRepotrackerDisabled returns the RepotrackerDisabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetRepotrackerDisabled() bool {
	if o == nil || IsNil(o.RepotrackerDisabled) {
		var ret bool
		return ret
	}
	return *o.RepotrackerDisabled
}

// GetRepotrackerDisabledOk returns a tuple with the RepotrackerDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetRepotrackerDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RepotrackerDisabled) {
		return nil, false
	}
	return o.RepotrackerDisabled, true
}

// HasRepotrackerDisabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasRepotrackerDisabled() bool {
	if o != nil && !IsNil(o.RepotrackerDisabled) {
		return true
	}

	return false
}

// SetRepotrackerDisabled gets a reference to the given bool and assigns it to the RepotrackerDisabled field.
func (o *ModelAPIProjectRef) SetRepotrackerDisabled(v bool) {
	o.RepotrackerDisabled = &v
}

// GetRepotrackerError returns the RepotrackerError field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetRepotrackerError() ModelAPIRepositoryErrorDetails {
	if o == nil || IsNil(o.RepotrackerError) {
		var ret ModelAPIRepositoryErrorDetails
		return ret
	}
	return *o.RepotrackerError
}

// GetRepotrackerErrorOk returns a tuple with the RepotrackerError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetRepotrackerErrorOk() (*ModelAPIRepositoryErrorDetails, bool) {
	if o == nil || IsNil(o.RepotrackerError) {
		return nil, false
	}
	return o.RepotrackerError, true
}

// HasRepotrackerError returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasRepotrackerError() bool {
	if o != nil && !IsNil(o.RepotrackerError) {
		return true
	}

	return false
}

// SetRepotrackerError gets a reference to the given ModelAPIRepositoryErrorDetails and assigns it to the RepotrackerError field.
func (o *ModelAPIProjectRef) SetRepotrackerError(v ModelAPIRepositoryErrorDetails) {
	o.RepotrackerError = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *ModelAPIProjectRef) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *ModelAPIProjectRef) SetRevision(v string) {
	o.Revision = &v
}

// GetSpawnHostScriptPath returns the SpawnHostScriptPath field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetSpawnHostScriptPath() string {
	if o == nil || IsNil(o.SpawnHostScriptPath) {
		var ret string
		return ret
	}
	return *o.SpawnHostScriptPath
}

// GetSpawnHostScriptPathOk returns a tuple with the SpawnHostScriptPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetSpawnHostScriptPathOk() (*string, bool) {
	if o == nil || IsNil(o.SpawnHostScriptPath) {
		return nil, false
	}
	return o.SpawnHostScriptPath, true
}

// HasSpawnHostScriptPath returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasSpawnHostScriptPath() bool {
	if o != nil && !IsNil(o.SpawnHostScriptPath) {
		return true
	}

	return false
}

// SetSpawnHostScriptPath gets a reference to the given string and assigns it to the SpawnHostScriptPath field.
func (o *ModelAPIProjectRef) SetSpawnHostScriptPath(v string) {
	o.SpawnHostScriptPath = &v
}

// GetStepbackBisect returns the StepbackBisect field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetStepbackBisect() bool {
	if o == nil || IsNil(o.StepbackBisect) {
		var ret bool
		return ret
	}
	return *o.StepbackBisect
}

// GetStepbackBisectOk returns a tuple with the StepbackBisect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetStepbackBisectOk() (*bool, bool) {
	if o == nil || IsNil(o.StepbackBisect) {
		return nil, false
	}
	return o.StepbackBisect, true
}

// HasStepbackBisect returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasStepbackBisect() bool {
	if o != nil && !IsNil(o.StepbackBisect) {
		return true
	}

	return false
}

// SetStepbackBisect gets a reference to the given bool and assigns it to the StepbackBisect field.
func (o *ModelAPIProjectRef) SetStepbackBisect(v bool) {
	o.StepbackBisect = &v
}

// GetStepbackDisabled returns the StepbackDisabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetStepbackDisabled() bool {
	if o == nil || IsNil(o.StepbackDisabled) {
		var ret bool
		return ret
	}
	return *o.StepbackDisabled
}

// GetStepbackDisabledOk returns a tuple with the StepbackDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetStepbackDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.StepbackDisabled) {
		return nil, false
	}
	return o.StepbackDisabled, true
}

// HasStepbackDisabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasStepbackDisabled() bool {
	if o != nil && !IsNil(o.StepbackDisabled) {
		return true
	}

	return false
}

// SetStepbackDisabled gets a reference to the given bool and assigns it to the StepbackDisabled field.
func (o *ModelAPIProjectRef) SetStepbackDisabled(v bool) {
	o.StepbackDisabled = &v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetSubscriptions() []ModelAPISubscription {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []ModelAPISubscription
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetSubscriptionsOk() ([]ModelAPISubscription, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasSubscriptions() bool {
	if o != nil && !IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []ModelAPISubscription and assigns it to the Subscriptions field.
func (o *ModelAPIProjectRef) SetSubscriptions(v []ModelAPISubscription) {
	o.Subscriptions = v
}

// GetTaskAnnotationSettings returns the TaskAnnotationSettings field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetTaskAnnotationSettings() ModelAPITaskAnnotationSettings {
	if o == nil || IsNil(o.TaskAnnotationSettings) {
		var ret ModelAPITaskAnnotationSettings
		return ret
	}
	return *o.TaskAnnotationSettings
}

// GetTaskAnnotationSettingsOk returns a tuple with the TaskAnnotationSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetTaskAnnotationSettingsOk() (*ModelAPITaskAnnotationSettings, bool) {
	if o == nil || IsNil(o.TaskAnnotationSettings) {
		return nil, false
	}
	return o.TaskAnnotationSettings, true
}

// HasTaskAnnotationSettings returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasTaskAnnotationSettings() bool {
	if o != nil && !IsNil(o.TaskAnnotationSettings) {
		return true
	}

	return false
}

// SetTaskAnnotationSettings gets a reference to the given ModelAPITaskAnnotationSettings and assigns it to the TaskAnnotationSettings field.
func (o *ModelAPIProjectRef) SetTaskAnnotationSettings(v ModelAPITaskAnnotationSettings) {
	o.TaskAnnotationSettings = &v
}

// GetTracksPushEvents returns the TracksPushEvents field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetTracksPushEvents() bool {
	if o == nil || IsNil(o.TracksPushEvents) {
		var ret bool
		return ret
	}
	return *o.TracksPushEvents
}

// GetTracksPushEventsOk returns a tuple with the TracksPushEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetTracksPushEventsOk() (*bool, bool) {
	if o == nil || IsNil(o.TracksPushEvents) {
		return nil, false
	}
	return o.TracksPushEvents, true
}

// HasTracksPushEvents returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasTracksPushEvents() bool {
	if o != nil && !IsNil(o.TracksPushEvents) {
		return true
	}

	return false
}

// SetTracksPushEvents gets a reference to the given bool and assigns it to the TracksPushEvents field.
func (o *ModelAPIProjectRef) SetTracksPushEvents(v bool) {
	o.TracksPushEvents = &v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetTriggers() []ModelAPITriggerDefinition {
	if o == nil || IsNil(o.Triggers) {
		var ret []ModelAPITriggerDefinition
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetTriggersOk() ([]ModelAPITriggerDefinition, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []ModelAPITriggerDefinition and assigns it to the Triggers field.
func (o *ModelAPIProjectRef) SetTriggers(v []ModelAPITriggerDefinition) {
	o.Triggers = v
}

// GetUseRepoSettings returns the UseRepoSettings field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetUseRepoSettings() bool {
	if o == nil || IsNil(o.UseRepoSettings) {
		var ret bool
		return ret
	}
	return *o.UseRepoSettings
}

// GetUseRepoSettingsOk returns a tuple with the UseRepoSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetUseRepoSettingsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseRepoSettings) {
		return nil, false
	}
	return o.UseRepoSettings, true
}

// HasUseRepoSettings returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasUseRepoSettings() bool {
	if o != nil && !IsNil(o.UseRepoSettings) {
		return true
	}

	return false
}

// SetUseRepoSettings gets a reference to the given bool and assigns it to the UseRepoSettings field.
func (o *ModelAPIProjectRef) SetUseRepoSettings(v bool) {
	o.UseRepoSettings = &v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetVariables() ModelAPIProjectVars {
	if o == nil || IsNil(o.Variables) {
		var ret ModelAPIProjectVars
		return ret
	}
	return *o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetVariablesOk() (*ModelAPIProjectVars, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given ModelAPIProjectVars and assigns it to the Variables field.
func (o *ModelAPIProjectRef) SetVariables(v ModelAPIProjectVars) {
	o.Variables = &v
}

// GetVersionControlEnabled returns the VersionControlEnabled field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetVersionControlEnabled() bool {
	if o == nil || IsNil(o.VersionControlEnabled) {
		var ret bool
		return ret
	}
	return *o.VersionControlEnabled
}

// GetVersionControlEnabledOk returns a tuple with the VersionControlEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetVersionControlEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.VersionControlEnabled) {
		return nil, false
	}
	return o.VersionControlEnabled, true
}

// HasVersionControlEnabled returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasVersionControlEnabled() bool {
	if o != nil && !IsNil(o.VersionControlEnabled) {
		return true
	}

	return false
}

// SetVersionControlEnabled gets a reference to the given bool and assigns it to the VersionControlEnabled field.
func (o *ModelAPIProjectRef) SetVersionControlEnabled(v bool) {
	o.VersionControlEnabled = &v
}

// GetWorkstationConfig returns the WorkstationConfig field value if set, zero value otherwise.
func (o *ModelAPIProjectRef) GetWorkstationConfig() ModelAPIWorkstationConfig {
	if o == nil || IsNil(o.WorkstationConfig) {
		var ret ModelAPIWorkstationConfig
		return ret
	}
	return *o.WorkstationConfig
}

// GetWorkstationConfigOk returns a tuple with the WorkstationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIProjectRef) GetWorkstationConfigOk() (*ModelAPIWorkstationConfig, bool) {
	if o == nil || IsNil(o.WorkstationConfig) {
		return nil, false
	}
	return o.WorkstationConfig, true
}

// HasWorkstationConfig returns a boolean if a field has been set.
func (o *ModelAPIProjectRef) HasWorkstationConfig() bool {
	if o != nil && !IsNil(o.WorkstationConfig) {
		return true
	}

	return false
}

// SetWorkstationConfig gets a reference to the given ModelAPIWorkstationConfig and assigns it to the WorkstationConfig field.
func (o *ModelAPIProjectRef) SetWorkstationConfig(v ModelAPIWorkstationConfig) {
	o.WorkstationConfig = &v
}

func (o ModelAPIProjectRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAPIProjectRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Admins) {
		toSerialize["admins"] = o.Admins
	}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.Banner) {
		toSerialize["banner"] = o.Banner
	}
	if !IsNil(o.BatchTime) {
		toSerialize["batch_time"] = o.BatchTime
	}
	if !IsNil(o.BranchName) {
		toSerialize["branch_name"] = o.BranchName
	}
	if !IsNil(o.BuildBaronSettings) {
		toSerialize["build_baron_settings"] = o.BuildBaronSettings
	}
	if !IsNil(o.CommitQueue) {
		toSerialize["commit_queue"] = o.CommitQueue
	}
	if !IsNil(o.ContainerSecrets) {
		toSerialize["container_secrets"] = o.ContainerSecrets
	}
	if !IsNil(o.ContainerSizeDefinitions) {
		toSerialize["container_size_definitions"] = o.ContainerSizeDefinitions
	}
	if !IsNil(o.DeactivatePrevious) {
		toSerialize["deactivate_previous"] = o.DeactivatePrevious
	}
	if !IsNil(o.DeleteAdmins) {
		toSerialize["delete_admins"] = o.DeleteAdmins
	}
	if !IsNil(o.DeleteContainerSecrets) {
		toSerialize["delete_container_secrets"] = o.DeleteContainerSecrets
	}
	if !IsNil(o.DeleteGitTagAuthorizedTeams) {
		toSerialize["delete_git_tag_authorized_teams"] = o.DeleteGitTagAuthorizedTeams
	}
	if !IsNil(o.DeleteGitTagAuthorizedUsers) {
		toSerialize["delete_git_tag_authorized_users"] = o.DeleteGitTagAuthorizedUsers
	}
	if !IsNil(o.DeleteSubscriptions) {
		toSerialize["delete_subscriptions"] = o.DeleteSubscriptions
	}
	if !IsNil(o.DisabledStatsCache) {
		toSerialize["disabled_stats_cache"] = o.DisabledStatsCache
	}
	if !IsNil(o.DispatchingDisabled) {
		toSerialize["dispatching_disabled"] = o.DispatchingDisabled
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ExternalLinks) {
		toSerialize["external_links"] = o.ExternalLinks
	}
	if !IsNil(o.GitTagAuthorizedTeams) {
		toSerialize["git_tag_authorized_teams"] = o.GitTagAuthorizedTeams
	}
	if !IsNil(o.GitTagAuthorizedUsers) {
		toSerialize["git_tag_authorized_users"] = o.GitTagAuthorizedUsers
	}
	if !IsNil(o.GitTagVersionsEnabled) {
		toSerialize["git_tag_versions_enabled"] = o.GitTagVersionsEnabled
	}
	if !IsNil(o.GithubChecksEnabled) {
		toSerialize["github_checks_enabled"] = o.GithubChecksEnabled
	}
	if !IsNil(o.GithubDynamicTokenPermissionGroups) {
		toSerialize["github_dynamic_token_permission_groups"] = o.GithubDynamicTokenPermissionGroups
	}
	if !IsNil(o.GithubPermissionGroupByRequester) {
		toSerialize["github_permission_group_by_requester"] = o.GithubPermissionGroupByRequester
	}
	if !IsNil(o.GithubTriggerAliases) {
		toSerialize["github_trigger_aliases"] = o.GithubTriggerAliases
	}
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.ManualPrTestingEnabled) {
		toSerialize["manual_pr_testing_enabled"] = o.ManualPrTestingEnabled
	}
	if !IsNil(o.NotifyOnFailure) {
		toSerialize["notify_on_failure"] = o.NotifyOnFailure
	}
	if !IsNil(o.OldestAllowedMergeBase) {
		toSerialize["oldest_allowed_merge_base"] = o.OldestAllowedMergeBase
	}
	if !IsNil(o.OwnerName) {
		toSerialize["owner_name"] = o.OwnerName
	}
	if !IsNil(o.ParsleyFilters) {
		toSerialize["parsley_filters"] = o.ParsleyFilters
	}
	if !IsNil(o.PatchTriggerAliases) {
		toSerialize["patch_trigger_aliases"] = o.PatchTriggerAliases
	}
	if !IsNil(o.PatchingDisabled) {
		toSerialize["patching_disabled"] = o.PatchingDisabled
	}
	if !IsNil(o.PerfEnabled) {
		toSerialize["perf_enabled"] = o.PerfEnabled
	}
	if !IsNil(o.PeriodicBuilds) {
		toSerialize["periodic_builds"] = o.PeriodicBuilds
	}
	if !IsNil(o.PrTestingEnabled) {
		toSerialize["pr_testing_enabled"] = o.PrTestingEnabled
	}
	if !IsNil(o.ProjectHealthView) {
		toSerialize["project_health_view"] = o.ProjectHealthView
	}
	if !IsNil(o.RemotePath) {
		toSerialize["remote_path"] = o.RemotePath
	}
	if !IsNil(o.RepoName) {
		toSerialize["repo_name"] = o.RepoName
	}
	if !IsNil(o.RepoRefId) {
		toSerialize["repo_ref_id"] = o.RepoRefId
	}
	if !IsNil(o.RepotrackerDisabled) {
		toSerialize["repotracker_disabled"] = o.RepotrackerDisabled
	}
	if !IsNil(o.RepotrackerError) {
		toSerialize["repotracker_error"] = o.RepotrackerError
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.SpawnHostScriptPath) {
		toSerialize["spawn_host_script_path"] = o.SpawnHostScriptPath
	}
	if !IsNil(o.StepbackBisect) {
		toSerialize["stepback_bisect"] = o.StepbackBisect
	}
	if !IsNil(o.StepbackDisabled) {
		toSerialize["stepback_disabled"] = o.StepbackDisabled
	}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if !IsNil(o.TaskAnnotationSettings) {
		toSerialize["task_annotation_settings"] = o.TaskAnnotationSettings
	}
	if !IsNil(o.TracksPushEvents) {
		toSerialize["tracks_push_events"] = o.TracksPushEvents
	}
	if !IsNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !IsNil(o.UseRepoSettings) {
		toSerialize["use_repo_settings"] = o.UseRepoSettings
	}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.VersionControlEnabled) {
		toSerialize["version_control_enabled"] = o.VersionControlEnabled
	}
	if !IsNil(o.WorkstationConfig) {
		toSerialize["workstation_config"] = o.WorkstationConfig
	}
	return toSerialize, nil
}

type NullableModelAPIProjectRef struct {
	value *ModelAPIProjectRef
	isSet bool
}

func (v NullableModelAPIProjectRef) Get() *ModelAPIProjectRef {
	return v.value
}

func (v *NullableModelAPIProjectRef) Set(val *ModelAPIProjectRef) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAPIProjectRef) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAPIProjectRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAPIProjectRef(val *ModelAPIProjectRef) *NullableModelAPIProjectRef {
	return &NullableModelAPIProjectRef{value: val, isSet: true}
}

func (v NullableModelAPIProjectRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAPIProjectRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


