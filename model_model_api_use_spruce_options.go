/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelAPIUseSpruceOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAPIUseSpruceOptions{}

// ModelAPIUseSpruceOptions struct for ModelAPIUseSpruceOptions
type ModelAPIUseSpruceOptions struct {
	HasUsedMainlineCommitsBefore *bool `json:"has_used_mainline_commits_before,omitempty"`
	HasUsedSpruceBefore *bool `json:"has_used_spruce_before,omitempty"`
	SpruceV1 *bool `json:"spruce_v1,omitempty"`
}

// NewModelAPIUseSpruceOptions instantiates a new ModelAPIUseSpruceOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAPIUseSpruceOptions() *ModelAPIUseSpruceOptions {
	this := ModelAPIUseSpruceOptions{}
	return &this
}

// NewModelAPIUseSpruceOptionsWithDefaults instantiates a new ModelAPIUseSpruceOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAPIUseSpruceOptionsWithDefaults() *ModelAPIUseSpruceOptions {
	this := ModelAPIUseSpruceOptions{}
	return &this
}

// GetHasUsedMainlineCommitsBefore returns the HasUsedMainlineCommitsBefore field value if set, zero value otherwise.
func (o *ModelAPIUseSpruceOptions) GetHasUsedMainlineCommitsBefore() bool {
	if o == nil || IsNil(o.HasUsedMainlineCommitsBefore) {
		var ret bool
		return ret
	}
	return *o.HasUsedMainlineCommitsBefore
}

// GetHasUsedMainlineCommitsBeforeOk returns a tuple with the HasUsedMainlineCommitsBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIUseSpruceOptions) GetHasUsedMainlineCommitsBeforeOk() (*bool, bool) {
	if o == nil || IsNil(o.HasUsedMainlineCommitsBefore) {
		return nil, false
	}
	return o.HasUsedMainlineCommitsBefore, true
}

// HasHasUsedMainlineCommitsBefore returns a boolean if a field has been set.
func (o *ModelAPIUseSpruceOptions) HasHasUsedMainlineCommitsBefore() bool {
	if o != nil && !IsNil(o.HasUsedMainlineCommitsBefore) {
		return true
	}

	return false
}

// SetHasUsedMainlineCommitsBefore gets a reference to the given bool and assigns it to the HasUsedMainlineCommitsBefore field.
func (o *ModelAPIUseSpruceOptions) SetHasUsedMainlineCommitsBefore(v bool) {
	o.HasUsedMainlineCommitsBefore = &v
}

// GetHasUsedSpruceBefore returns the HasUsedSpruceBefore field value if set, zero value otherwise.
func (o *ModelAPIUseSpruceOptions) GetHasUsedSpruceBefore() bool {
	if o == nil || IsNil(o.HasUsedSpruceBefore) {
		var ret bool
		return ret
	}
	return *o.HasUsedSpruceBefore
}

// GetHasUsedSpruceBeforeOk returns a tuple with the HasUsedSpruceBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIUseSpruceOptions) GetHasUsedSpruceBeforeOk() (*bool, bool) {
	if o == nil || IsNil(o.HasUsedSpruceBefore) {
		return nil, false
	}
	return o.HasUsedSpruceBefore, true
}

// HasHasUsedSpruceBefore returns a boolean if a field has been set.
func (o *ModelAPIUseSpruceOptions) HasHasUsedSpruceBefore() bool {
	if o != nil && !IsNil(o.HasUsedSpruceBefore) {
		return true
	}

	return false
}

// SetHasUsedSpruceBefore gets a reference to the given bool and assigns it to the HasUsedSpruceBefore field.
func (o *ModelAPIUseSpruceOptions) SetHasUsedSpruceBefore(v bool) {
	o.HasUsedSpruceBefore = &v
}

// GetSpruceV1 returns the SpruceV1 field value if set, zero value otherwise.
func (o *ModelAPIUseSpruceOptions) GetSpruceV1() bool {
	if o == nil || IsNil(o.SpruceV1) {
		var ret bool
		return ret
	}
	return *o.SpruceV1
}

// GetSpruceV1Ok returns a tuple with the SpruceV1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAPIUseSpruceOptions) GetSpruceV1Ok() (*bool, bool) {
	if o == nil || IsNil(o.SpruceV1) {
		return nil, false
	}
	return o.SpruceV1, true
}

// HasSpruceV1 returns a boolean if a field has been set.
func (o *ModelAPIUseSpruceOptions) HasSpruceV1() bool {
	if o != nil && !IsNil(o.SpruceV1) {
		return true
	}

	return false
}

// SetSpruceV1 gets a reference to the given bool and assigns it to the SpruceV1 field.
func (o *ModelAPIUseSpruceOptions) SetSpruceV1(v bool) {
	o.SpruceV1 = &v
}

func (o ModelAPIUseSpruceOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAPIUseSpruceOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasUsedMainlineCommitsBefore) {
		toSerialize["has_used_mainline_commits_before"] = o.HasUsedMainlineCommitsBefore
	}
	if !IsNil(o.HasUsedSpruceBefore) {
		toSerialize["has_used_spruce_before"] = o.HasUsedSpruceBefore
	}
	if !IsNil(o.SpruceV1) {
		toSerialize["spruce_v1"] = o.SpruceV1
	}
	return toSerialize, nil
}

type NullableModelAPIUseSpruceOptions struct {
	value *ModelAPIUseSpruceOptions
	isSet bool
}

func (v NullableModelAPIUseSpruceOptions) Get() *ModelAPIUseSpruceOptions {
	return v.value
}

func (v *NullableModelAPIUseSpruceOptions) Set(val *ModelAPIUseSpruceOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAPIUseSpruceOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAPIUseSpruceOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAPIUseSpruceOptions(val *ModelAPIUseSpruceOptions) *NullableModelAPIUseSpruceOptions {
	return &NullableModelAPIUseSpruceOptions{value: val, isSet: true}
}

func (v NullableModelAPIUseSpruceOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAPIUseSpruceOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


