/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RoutePatchChangeStatusHandler type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutePatchChangeStatusHandler{}

// RoutePatchChangeStatusHandler struct for RoutePatchChangeStatusHandler
type RoutePatchChangeStatusHandler struct {
	// The priority to set the patch to
	Activated *bool `json:"activated,omitempty"`
	// The activation status to set the patch to
	Priority *int32 `json:"priority,omitempty"`
}

// NewRoutePatchChangeStatusHandler instantiates a new RoutePatchChangeStatusHandler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutePatchChangeStatusHandler() *RoutePatchChangeStatusHandler {
	this := RoutePatchChangeStatusHandler{}
	return &this
}

// NewRoutePatchChangeStatusHandlerWithDefaults instantiates a new RoutePatchChangeStatusHandler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutePatchChangeStatusHandlerWithDefaults() *RoutePatchChangeStatusHandler {
	this := RoutePatchChangeStatusHandler{}
	return &this
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *RoutePatchChangeStatusHandler) GetActivated() bool {
	if o == nil || IsNil(o.Activated) {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePatchChangeStatusHandler) GetActivatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Activated) {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *RoutePatchChangeStatusHandler) HasActivated() bool {
	if o != nil && !IsNil(o.Activated) {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *RoutePatchChangeStatusHandler) SetActivated(v bool) {
	o.Activated = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *RoutePatchChangeStatusHandler) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePatchChangeStatusHandler) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *RoutePatchChangeStatusHandler) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *RoutePatchChangeStatusHandler) SetPriority(v int32) {
	o.Priority = &v
}

func (o RoutePatchChangeStatusHandler) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutePatchChangeStatusHandler) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Activated) {
		toSerialize["activated"] = o.Activated
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableRoutePatchChangeStatusHandler struct {
	value *RoutePatchChangeStatusHandler
	isSet bool
}

func (v NullableRoutePatchChangeStatusHandler) Get() *RoutePatchChangeStatusHandler {
	return v.value
}

func (v *NullableRoutePatchChangeStatusHandler) Set(val *RoutePatchChangeStatusHandler) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutePatchChangeStatusHandler) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutePatchChangeStatusHandler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutePatchChangeStatusHandler(val *RoutePatchChangeStatusHandler) *NullableRoutePatchChangeStatusHandler {
	return &NullableRoutePatchChangeStatusHandler{value: val, isSet: true}
}

func (v NullableRoutePatchChangeStatusHandler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutePatchChangeStatusHandler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


