/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouteCopyVariablesOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteCopyVariablesOptions{}

// RouteCopyVariablesOptions struct for RouteCopyVariablesOptions
type RouteCopyVariablesOptions struct {
	// Required. ProjectID to copy source_project variables to.
	CopyTo *string `json:"copy_to,omitempty"`
	// If set to true, route returns the variables from source_project that will be copied. (If private, the values will be redacted.) If dry_run is set, then the route does not complete the copy, but returns OK if no project variables in the source project will be overwritten (this concerns all variables in the destination project, but only redacted variables in the source project). Otherwise, an error is given which includes the project variable keys that overlap. If dry_run is not set, the copy is completed, and variables could be overwritten.
	DryRun *bool `json:"dry_run,omitempty"`
	// If set to true, private variables will also be copied.
	IncludePrivate *bool `json:"include_private,omitempty"`
	// If set to true, will remove variables from the copy_to project that are not in source_project.
	Overwrite *bool `json:"overwrite,omitempty"`
}

// NewRouteCopyVariablesOptions instantiates a new RouteCopyVariablesOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteCopyVariablesOptions() *RouteCopyVariablesOptions {
	this := RouteCopyVariablesOptions{}
	return &this
}

// NewRouteCopyVariablesOptionsWithDefaults instantiates a new RouteCopyVariablesOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteCopyVariablesOptionsWithDefaults() *RouteCopyVariablesOptions {
	this := RouteCopyVariablesOptions{}
	return &this
}

// GetCopyTo returns the CopyTo field value if set, zero value otherwise.
func (o *RouteCopyVariablesOptions) GetCopyTo() string {
	if o == nil || IsNil(o.CopyTo) {
		var ret string
		return ret
	}
	return *o.CopyTo
}

// GetCopyToOk returns a tuple with the CopyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCopyVariablesOptions) GetCopyToOk() (*string, bool) {
	if o == nil || IsNil(o.CopyTo) {
		return nil, false
	}
	return o.CopyTo, true
}

// HasCopyTo returns a boolean if a field has been set.
func (o *RouteCopyVariablesOptions) HasCopyTo() bool {
	if o != nil && !IsNil(o.CopyTo) {
		return true
	}

	return false
}

// SetCopyTo gets a reference to the given string and assigns it to the CopyTo field.
func (o *RouteCopyVariablesOptions) SetCopyTo(v string) {
	o.CopyTo = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *RouteCopyVariablesOptions) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCopyVariablesOptions) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *RouteCopyVariablesOptions) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *RouteCopyVariablesOptions) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetIncludePrivate returns the IncludePrivate field value if set, zero value otherwise.
func (o *RouteCopyVariablesOptions) GetIncludePrivate() bool {
	if o == nil || IsNil(o.IncludePrivate) {
		var ret bool
		return ret
	}
	return *o.IncludePrivate
}

// GetIncludePrivateOk returns a tuple with the IncludePrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCopyVariablesOptions) GetIncludePrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludePrivate) {
		return nil, false
	}
	return o.IncludePrivate, true
}

// HasIncludePrivate returns a boolean if a field has been set.
func (o *RouteCopyVariablesOptions) HasIncludePrivate() bool {
	if o != nil && !IsNil(o.IncludePrivate) {
		return true
	}

	return false
}

// SetIncludePrivate gets a reference to the given bool and assigns it to the IncludePrivate field.
func (o *RouteCopyVariablesOptions) SetIncludePrivate(v bool) {
	o.IncludePrivate = &v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *RouteCopyVariablesOptions) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCopyVariablesOptions) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *RouteCopyVariablesOptions) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *RouteCopyVariablesOptions) SetOverwrite(v bool) {
	o.Overwrite = &v
}

func (o RouteCopyVariablesOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteCopyVariablesOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CopyTo) {
		toSerialize["copy_to"] = o.CopyTo
	}
	if !IsNil(o.DryRun) {
		toSerialize["dry_run"] = o.DryRun
	}
	if !IsNil(o.IncludePrivate) {
		toSerialize["include_private"] = o.IncludePrivate
	}
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	return toSerialize, nil
}

type NullableRouteCopyVariablesOptions struct {
	value *RouteCopyVariablesOptions
	isSet bool
}

func (v NullableRouteCopyVariablesOptions) Get() *RouteCopyVariablesOptions {
	return v.value
}

func (v *NullableRouteCopyVariablesOptions) Set(val *RouteCopyVariablesOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteCopyVariablesOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteCopyVariablesOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteCopyVariablesOptions(val *RouteCopyVariablesOptions) *NullableRouteCopyVariablesOptions {
	return &NullableRouteCopyVariablesOptions{value: val, isSet: true}
}

func (v NullableRouteCopyVariablesOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteCopyVariablesOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


