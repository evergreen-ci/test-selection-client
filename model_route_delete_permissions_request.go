/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouteDeletePermissionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteDeletePermissionsRequest{}

// RouteDeletePermissionsRequest struct for RouteDeletePermissionsRequest
type RouteDeletePermissionsRequest struct {
	// resource_id - the resource ID for which to delete permissions.   Required unless deleting all permissions.
	ResourceId *string `json:"resource_id,omitempty"`
	// resource_type - the type of resources for which to delete permissions. Must   be one of \"project\", \"distro\", \"superuser\", or \"all\". \"all\" will revoke all   permissions for the user.
	ResourceType *string `json:"resource_type,omitempty"`
}

// NewRouteDeletePermissionsRequest instantiates a new RouteDeletePermissionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteDeletePermissionsRequest() *RouteDeletePermissionsRequest {
	this := RouteDeletePermissionsRequest{}
	return &this
}

// NewRouteDeletePermissionsRequestWithDefaults instantiates a new RouteDeletePermissionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteDeletePermissionsRequestWithDefaults() *RouteDeletePermissionsRequest {
	this := RouteDeletePermissionsRequest{}
	return &this
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *RouteDeletePermissionsRequest) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteDeletePermissionsRequest) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *RouteDeletePermissionsRequest) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *RouteDeletePermissionsRequest) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *RouteDeletePermissionsRequest) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteDeletePermissionsRequest) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *RouteDeletePermissionsRequest) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *RouteDeletePermissionsRequest) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o RouteDeletePermissionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteDeletePermissionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableRouteDeletePermissionsRequest struct {
	value *RouteDeletePermissionsRequest
	isSet bool
}

func (v NullableRouteDeletePermissionsRequest) Get() *RouteDeletePermissionsRequest {
	return v.value
}

func (v *NullableRouteDeletePermissionsRequest) Set(val *RouteDeletePermissionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteDeletePermissionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteDeletePermissionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteDeletePermissionsRequest(val *RouteDeletePermissionsRequest) *NullableRouteDeletePermissionsRequest {
	return &NullableRouteDeletePermissionsRequest{value: val, isSet: true}
}

func (v NullableRouteDeletePermissionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteDeletePermissionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


