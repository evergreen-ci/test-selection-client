/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// VersionsAPIService VersionsAPI service
type VersionsAPIService service

type ApiProjectsProjectIdVersionsGetRequest struct {
	ctx context.Context
	ApiService *VersionsAPIService
	projectId string
	skip *int32
	limit *int32
	start *int32
	revisionEnd *int32
	requester *string
	includeBuilds *bool
	byBuildVariant *string
	includeTasks *bool
	byTask *string
}

// Number of versions to skip.
func (r ApiProjectsProjectIdVersionsGetRequest) Skip(skip int32) ApiProjectsProjectIdVersionsGetRequest {
	r.skip = &skip
	return r
}

// The number of versions to be returned per page of pagination. Defaults to 20.
func (r ApiProjectsProjectIdVersionsGetRequest) Limit(limit int32) ApiProjectsProjectIdVersionsGetRequest {
	r.limit = &limit
	return r
}

// The version order number to start at, for pagination. Will return the versions that are less than (and therefore older) the revision number specified.
func (r ApiProjectsProjectIdVersionsGetRequest) Start(start int32) ApiProjectsProjectIdVersionsGetRequest {
	r.start = &start
	return r
}

// Will return the versions that are greater than (and therefore more recent) or equal to revision number specified.
func (r ApiProjectsProjectIdVersionsGetRequest) RevisionEnd(revisionEnd int32) ApiProjectsProjectIdVersionsGetRequest {
	r.revisionEnd = &revisionEnd
	return r
}

// Returns versions for this requester only. Defaults to gitter_request (caused by git commit, aka the repotracker requester). Can also be set to patch_request, github_pull_request, trigger_request (Project Trigger versions) , github_merge_request (GitHub merge queue),, and ad_hoc (periodic builds).
func (r ApiProjectsProjectIdVersionsGetRequest) Requester(requester string) ApiProjectsProjectIdVersionsGetRequest {
	r.requester = &requester
	return r
}

// If set, will return some information for each build in the version.
func (r ApiProjectsProjectIdVersionsGetRequest) IncludeBuilds(includeBuilds bool) ApiProjectsProjectIdVersionsGetRequest {
	r.includeBuilds = &includeBuilds
	return r
}

// If set, will only include information for this build, and only return versions with this build activated. Must have include_builds set.
func (r ApiProjectsProjectIdVersionsGetRequest) ByBuildVariant(byBuildVariant string) ApiProjectsProjectIdVersionsGetRequest {
	r.byBuildVariant = &byBuildVariant
	return r
}

// If set, will return some information for each task in the included builds. This is only allowed if include_builds is set.
func (r ApiProjectsProjectIdVersionsGetRequest) IncludeTasks(includeTasks bool) ApiProjectsProjectIdVersionsGetRequest {
	r.includeTasks = &includeTasks
	return r
}

// If set, will only include information for this task, and will only return versions with this task activated. Must have include_tasks set.
func (r ApiProjectsProjectIdVersionsGetRequest) ByTask(byTask string) ApiProjectsProjectIdVersionsGetRequest {
	r.byTask = &byTask
	return r
}

func (r ApiProjectsProjectIdVersionsGetRequest) Execute() ([]ModelAPIVersion, *http.Response, error) {
	return r.ApiService.ProjectsProjectIdVersionsGetExecute(r)
}

/*
ProjectsProjectIdVersionsGet Get versions for a project

Returns a paginated list of recent versions for a project. Parameters should be passed into the JSON body (the route still accepts limit and start as query parameters to support legacy behavior).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId the project ID
 @return ApiProjectsProjectIdVersionsGetRequest
*/
func (a *VersionsAPIService) ProjectsProjectIdVersionsGet(ctx context.Context, projectId string) ApiProjectsProjectIdVersionsGetRequest {
	return ApiProjectsProjectIdVersionsGetRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return []ModelAPIVersion
func (a *VersionsAPIService) ProjectsProjectIdVersionsGetExecute(r ApiProjectsProjectIdVersionsGetRequest) ([]ModelAPIVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelAPIVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VersionsAPIService.ProjectsProjectIdVersionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/{project_id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "", "")
	}
	if r.revisionEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "revision_end", r.revisionEnd, "", "")
	}
	if r.requester != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester", r.requester, "", "")
	}
	if r.includeBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_builds", r.includeBuilds, "", "")
	}
	if r.byBuildVariant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_build_variant", r.byBuildVariant, "", "")
	}
	if r.includeTasks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_tasks", r.includeTasks, "", "")
	}
	if r.byTask != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_task", r.byTask, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-User"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-User"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProjectsProjectIdVersionsPatchRequest struct {
	ctx context.Context
	ApiService *VersionsAPIService
	projectId string
	startTimeStr *string
	priority *int32
	endTimeStr *string
	revisionStart *int32
	revisionEnd *int32
	requester *string
	byBuildVariant *string
	byTask *string
}

// Timestamp to start looking for applicable versions.
func (r ApiProjectsProjectIdVersionsPatchRequest) StartTimeStr(startTimeStr string) ApiProjectsProjectIdVersionsPatchRequest {
	r.startTimeStr = &startTimeStr
	return r
}

// Priority to set for all tasks within applicable versions.
func (r ApiProjectsProjectIdVersionsPatchRequest) Priority(priority int32) ApiProjectsProjectIdVersionsPatchRequest {
	r.priority = &priority
	return r
}

// Timestamp to stop looking for applicable versions.
func (r ApiProjectsProjectIdVersionsPatchRequest) EndTimeStr(endTimeStr string) ApiProjectsProjectIdVersionsPatchRequest {
	r.endTimeStr = &endTimeStr
	return r
}

// The version order number to start at.
func (r ApiProjectsProjectIdVersionsPatchRequest) RevisionStart(revisionStart int32) ApiProjectsProjectIdVersionsPatchRequest {
	r.revisionStart = &revisionStart
	return r
}

// The version order number to end at.
func (r ApiProjectsProjectIdVersionsPatchRequest) RevisionEnd(revisionEnd int32) ApiProjectsProjectIdVersionsPatchRequest {
	r.revisionEnd = &revisionEnd
	return r
}

// Returns versions for this requester only. Defaults to gitter_request (caused by git commit, aka the repotracker requester). Can also be set to patch_request, github_pull_request, trigger_request (Project Trigger versions) , github_merge_request (GitHub merge queue), and ad_hoc (periodic builds).
func (r ApiProjectsProjectIdVersionsPatchRequest) Requester(requester string) ApiProjectsProjectIdVersionsPatchRequest {
	r.requester = &requester
	return r
}

// If set, will only include information for this build, and only return versions with this build activated. Must have include_builds set.
func (r ApiProjectsProjectIdVersionsPatchRequest) ByBuildVariant(byBuildVariant string) ApiProjectsProjectIdVersionsPatchRequest {
	r.byBuildVariant = &byBuildVariant
	return r
}

// If set, will only include information for this task, and will only return versions with this task activated. Must have include_tasks set.
func (r ApiProjectsProjectIdVersionsPatchRequest) ByTask(byTask string) ApiProjectsProjectIdVersionsPatchRequest {
	r.byTask = &byTask
	return r
}

func (r ApiProjectsProjectIdVersionsPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProjectsProjectIdVersionsPatchExecute(r)
}

/*
ProjectsProjectIdVersionsPatch Modify versions for a project

Modifies a group of versions for a project. Parameters should be passed into the JSON body. Currently supports setting priority for all versions that the given options apply to. This route is restricted to project admins.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId the project ID
 @return ApiProjectsProjectIdVersionsPatchRequest
*/
func (a *VersionsAPIService) ProjectsProjectIdVersionsPatch(ctx context.Context, projectId string) ApiProjectsProjectIdVersionsPatchRequest {
	return ApiProjectsProjectIdVersionsPatchRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
func (a *VersionsAPIService) ProjectsProjectIdVersionsPatchExecute(r ApiProjectsProjectIdVersionsPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VersionsAPIService.ProjectsProjectIdVersionsPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/projects/{project_id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTimeStr == nil {
		return nil, reportError("startTimeStr is required and must be specified")
	}
	if r.priority == nil {
		return nil, reportError("priority is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "start_time_str", r.startTimeStr, "", "")
	if r.endTimeStr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time_str", r.endTimeStr, "", "")
	}
	if r.revisionStart != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "revision_start", r.revisionStart, "", "")
	}
	if r.revisionEnd != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "revision_end", r.revisionEnd, "", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "priority", r.priority, "", "")
	if r.requester != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requester", r.requester, "", "")
	}
	if r.byBuildVariant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_build_variant", r.byBuildVariant, "", "")
	}
	if r.byTask != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "by_task", r.byTask, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-User"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-User"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVersionsVersionIdAbortPostRequest struct {
	ctx context.Context
	ApiService *VersionsAPIService
	versionId string
}

func (r ApiVersionsVersionIdAbortPostRequest) Execute() (*ModelAPIVersion, *http.Response, error) {
	return r.ApiService.VersionsVersionIdAbortPostExecute(r)
}

/*
VersionsVersionIdAbortPost Abort a version

Aborts a single version using its ID then returns the version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param versionId version ID
 @return ApiVersionsVersionIdAbortPostRequest
*/
func (a *VersionsAPIService) VersionsVersionIdAbortPost(ctx context.Context, versionId string) ApiVersionsVersionIdAbortPostRequest {
	return ApiVersionsVersionIdAbortPostRequest{
		ApiService: a,
		ctx: ctx,
		versionId: versionId,
	}
}

// Execute executes the request
//  @return ModelAPIVersion
func (a *VersionsAPIService) VersionsVersionIdAbortPostExecute(r ApiVersionsVersionIdAbortPostRequest) (*ModelAPIVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelAPIVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VersionsAPIService.VersionsVersionIdAbortPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/versions/{version_id}/abort"
	localVarPath = strings.Replace(localVarPath, "{"+"version_id"+"}", url.PathEscape(parameterValueToString(r.versionId, "versionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-User"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-User"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVersionsVersionIdGetRequest struct {
	ctx context.Context
	ApiService *VersionsAPIService
	versionId string
}

func (r ApiVersionsVersionIdGetRequest) Execute() (*ModelAPIVersion, *http.Response, error) {
	return r.ApiService.VersionsVersionIdGetExecute(r)
}

/*
VersionsVersionIdGet Fetch version by ID

Fetches a single version using its ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param versionId version ID
 @return ApiVersionsVersionIdGetRequest
*/
func (a *VersionsAPIService) VersionsVersionIdGet(ctx context.Context, versionId string) ApiVersionsVersionIdGetRequest {
	return ApiVersionsVersionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		versionId: versionId,
	}
}

// Execute executes the request
//  @return ModelAPIVersion
func (a *VersionsAPIService) VersionsVersionIdGetExecute(r ApiVersionsVersionIdGetRequest) (*ModelAPIVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelAPIVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VersionsAPIService.VersionsVersionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/versions/{version_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"version_id"+"}", url.PathEscape(parameterValueToString(r.versionId, "versionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-User"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-User"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVersionsVersionIdPatchRequest struct {
	ctx context.Context
	ApiService *VersionsAPIService
	versionId string
	object *RouteVersionPatchHandler
}

// parameters
func (r ApiVersionsVersionIdPatchRequest) Object(object RouteVersionPatchHandler) ApiVersionsVersionIdPatchRequest {
	r.object = &object
	return r
}

func (r ApiVersionsVersionIdPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.VersionsVersionIdPatchExecute(r)
}

/*
VersionsVersionIdPatch Activate or deactivate a version

Activate or deactivates a given version. Does not return the version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param versionId the version ID
 @return ApiVersionsVersionIdPatchRequest
*/
func (a *VersionsAPIService) VersionsVersionIdPatch(ctx context.Context, versionId string) ApiVersionsVersionIdPatchRequest {
	return ApiVersionsVersionIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		versionId: versionId,
	}
}

// Execute executes the request
func (a *VersionsAPIService) VersionsVersionIdPatchExecute(r ApiVersionsVersionIdPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VersionsAPIService.VersionsVersionIdPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/versions/{version_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"version_id"+"}", url.PathEscape(parameterValueToString(r.versionId, "versionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.object == nil {
		return nil, reportError("object is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.object
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-User"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-User"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVersionsVersionIdRestartPostRequest struct {
	ctx context.Context
	ApiService *VersionsAPIService
	versionId string
}

func (r ApiVersionsVersionIdRestartPostRequest) Execute() (*ModelAPIVersion, *http.Response, error) {
	return r.ApiService.VersionsVersionIdRestartPostExecute(r)
}

/*
VersionsVersionIdRestartPost Restart a version

Restarts a single version using its ID then returns the version

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param versionId version ID
 @return ApiVersionsVersionIdRestartPostRequest
*/
func (a *VersionsAPIService) VersionsVersionIdRestartPost(ctx context.Context, versionId string) ApiVersionsVersionIdRestartPostRequest {
	return ApiVersionsVersionIdRestartPostRequest{
		ApiService: a,
		ctx: ctx,
		versionId: versionId,
	}
}

// Execute executes the request
//  @return ModelAPIVersion
func (a *VersionsAPIService) VersionsVersionIdRestartPostExecute(r ApiVersionsVersionIdRestartPostRequest) (*ModelAPIVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelAPIVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VersionsAPIService.VersionsVersionIdRestartPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/versions/{version_id}/restart"
	localVarPath = strings.Replace(localVarPath, "{"+"version_id"+"}", url.PathEscape(parameterValueToString(r.versionId, "versionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-User"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-User"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
