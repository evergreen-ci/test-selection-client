/*
Evergreen REST v2 API

Testing AnnotationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/evergreen-ci/test-selection-client"
)

func Test_openapi_AnnotationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AnnotationsAPIService TasksBuildIdAnnotationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buildId string

		resp, httpRes, err := apiClient.AnnotationsAPI.TasksBuildIdAnnotationsGet(context.Background(), buildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnnotationsAPIService TasksTaskIdAnnotationPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.AnnotationsAPI.TasksTaskIdAnnotationPatch(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnnotationsAPIService TasksTaskIdAnnotationPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.AnnotationsAPI.TasksTaskIdAnnotationPut(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnnotationsAPIService TasksTaskIdAnnotationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.AnnotationsAPI.TasksTaskIdAnnotationsGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnnotationsAPIService TasksTaskIdCreatedTicketPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		httpRes, err := apiClient.AnnotationsAPI.TasksTaskIdCreatedTicketPut(context.Background(), taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnnotationsAPIService TasksVersionIdAnnotationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var versionId string

		resp, httpRes, err := apiClient.AnnotationsAPI.TasksVersionIdAnnotationsGet(context.Background(), versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
