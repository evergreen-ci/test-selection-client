/*
Evergreen REST v2 API

Testing TasksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/evergreen-ci/test-selection-client"
)

func Test_openapi_TasksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TasksAPIService BuildsBuildIdTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var buildId string

		resp, httpRes, err := apiClient.TasksAPI.BuildsBuildIdTasksGet(context.Background(), buildId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService ProjectsProjectIdTaskExecutionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.TasksAPI.ProjectsProjectIdTaskExecutionsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService ProjectsProjectIdTasksTaskNameGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var taskName string

		resp, httpRes, err := apiClient.TasksAPI.ProjectsProjectIdTasksTaskNameGet(context.Background(), projectId, taskName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService ProjectsProjectNameRevisionsCommitHashTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectName string
		var commitHash string

		resp, httpRes, err := apiClient.TasksAPI.ProjectsProjectNameRevisionsCommitHashTasksGet(context.Background(), projectName, commitHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService TasksTaskIdAbortPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.TasksAPI.TasksTaskIdAbortPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService TasksTaskIdBuildTaskLogsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.TasksAPI.TasksTaskIdBuildTaskLogsGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService TasksTaskIdBuildTestLogsPathGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string
		var path string

		resp, httpRes, err := apiClient.TasksAPI.TasksTaskIdBuildTestLogsPathGet(context.Background(), taskId, path).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService TasksTaskIdGeneratedTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.TasksAPI.TasksTaskIdGeneratedTasksGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService TasksTaskIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.TasksAPI.TasksTaskIdGet(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService TasksTaskIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.TasksAPI.TasksTaskIdPatch(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TasksAPIService TasksTaskIdRestartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taskId string

		resp, httpRes, err := apiClient.TasksAPI.TasksTaskIdRestartPost(context.Background(), taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
