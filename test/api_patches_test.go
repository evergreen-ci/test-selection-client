/*
Evergreen REST v2 API

Testing PatchesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/evergreen-ci/test-selection-client"
)

func Test_openapi_PatchesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PatchesAPIService PatchesPatchIdAbortPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var patchId string

		resp, httpRes, err := apiClient.PatchesAPI.PatchesPatchIdAbortPost(context.Background(), patchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService PatchesPatchIdConfigurePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var patchId string

		resp, httpRes, err := apiClient.PatchesAPI.PatchesPatchIdConfigurePost(context.Background(), patchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService PatchesPatchIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var patchId string

		resp, httpRes, err := apiClient.PatchesAPI.PatchesPatchIdGet(context.Background(), patchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService PatchesPatchIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var patchId string

		resp, httpRes, err := apiClient.PatchesAPI.PatchesPatchIdPatch(context.Background(), patchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService PatchesPatchIdRawGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var patchId string

		resp, httpRes, err := apiClient.PatchesAPI.PatchesPatchIdRawGet(context.Background(), patchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService PatchesPatchIdRestartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var patchId string

		resp, httpRes, err := apiClient.PatchesAPI.PatchesPatchIdRestartPost(context.Background(), patchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService ProjectsPatchIdRawModulesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var patchId string

		resp, httpRes, err := apiClient.PatchesAPI.ProjectsPatchIdRawModulesGet(context.Background(), patchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService ProjectsProjectIdPatchesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.PatchesAPI.ProjectsProjectIdPatchesGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PatchesAPIService UsersUserIdPatchesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var projectId string

		resp, httpRes, err := apiClient.PatchesAPI.UsersUserIdPatchesGet(context.Background(), userId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
