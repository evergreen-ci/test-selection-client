/*
Evergreen REST v2 API

Testing HostsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/evergreen-ci/test-selection-client"
)

func Test_openapi_HostsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HostsAPIService HostsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HostsAPI.HostsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostsHostIdChangePasswordPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string

		httpRes, err := apiClient.HostsAPI.HostsHostIdChangePasswordPost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostsHostIdExtendExpirationPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string

		httpRes, err := apiClient.HostsAPI.HostsHostIdExtendExpirationPost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostsHostIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string

		resp, httpRes, err := apiClient.HostsAPI.HostsHostIdGet(context.Background(), hostId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostsHostIdStartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string

		httpRes, err := apiClient.HostsAPI.HostsHostIdStartPost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostsHostIdStopPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string

		httpRes, err := apiClient.HostsAPI.HostsHostIdStopPost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostsHostIdTerminatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hostId string

		httpRes, err := apiClient.HostsAPI.HostsHostIdTerminatePost(context.Background(), hostId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService HostsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HostsAPI.HostsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HostsAPIService UsersUserIdHostsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.HostsAPI.UsersUserIdHostsGet(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
