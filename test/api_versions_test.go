/*
Evergreen REST v2 API

Testing VersionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/evergreen-ci/test-selection-client"
)

func Test_openapi_VersionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VersionsAPIService ProjectsProjectIdVersionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.VersionsAPI.ProjectsProjectIdVersionsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VersionsAPIService ProjectsProjectIdVersionsPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		httpRes, err := apiClient.VersionsAPI.ProjectsProjectIdVersionsPatch(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VersionsAPIService VersionsVersionIdAbortPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var versionId string

		resp, httpRes, err := apiClient.VersionsAPI.VersionsVersionIdAbortPost(context.Background(), versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VersionsAPIService VersionsVersionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var versionId string

		resp, httpRes, err := apiClient.VersionsAPI.VersionsVersionIdGet(context.Background(), versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VersionsAPIService VersionsVersionIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var versionId string

		httpRes, err := apiClient.VersionsAPI.VersionsVersionIdPatch(context.Background(), versionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VersionsAPIService VersionsVersionIdRestartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var versionId string

		resp, httpRes, err := apiClient.VersionsAPI.VersionsVersionIdRestartPost(context.Background(), versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
