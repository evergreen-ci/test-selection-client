/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ModelProjectHealthView the model 'ModelProjectHealthView'
type ModelProjectHealthView string

// List of model.ProjectHealthView
const (
	ProjectHealthViewAll ModelProjectHealthView = "ALL"
	ProjectHealthViewFailed ModelProjectHealthView = "FAILED"
)

// All allowed values of ModelProjectHealthView enum
var AllowedModelProjectHealthViewEnumValues = []ModelProjectHealthView{
	"ALL",
	"FAILED",
}

func (v *ModelProjectHealthView) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelProjectHealthView(value)
	for _, existing := range AllowedModelProjectHealthViewEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelProjectHealthView", value)
}

// NewModelProjectHealthViewFromValue returns a pointer to a valid ModelProjectHealthView
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelProjectHealthViewFromValue(v string) (*ModelProjectHealthView, error) {
	ev := ModelProjectHealthView(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelProjectHealthView: valid values are %v", v, AllowedModelProjectHealthViewEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelProjectHealthView) IsValid() bool {
	for _, existing := range AllowedModelProjectHealthViewEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to model.ProjectHealthView value
func (v ModelProjectHealthView) Ptr() *ModelProjectHealthView {
	return &v
}

type NullableModelProjectHealthView struct {
	value *ModelProjectHealthView
	isSet bool
}

func (v NullableModelProjectHealthView) Get() *ModelProjectHealthView {
	return v.value
}

func (v *NullableModelProjectHealthView) Set(val *ModelProjectHealthView) {
	v.value = val
	v.isSet = true
}

func (v NullableModelProjectHealthView) IsSet() bool {
	return v.isSet
}

func (v *NullableModelProjectHealthView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelProjectHealthView(val *ModelProjectHealthView) *NullableModelProjectHealthView {
	return &NullableModelProjectHealthView{value: val, isSet: true}
}

func (v NullableModelProjectHealthView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelProjectHealthView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

