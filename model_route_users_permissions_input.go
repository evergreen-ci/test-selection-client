/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouteUsersPermissionsInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteUsersPermissionsInput{}

// RouteUsersPermissionsInput struct for RouteUsersPermissionsInput
type RouteUsersPermissionsInput struct {
	// The resource ID
	ResourceId *string `json:"resource_id,omitempty"`
	// The resource type
	ResourceType *string `json:"resource_type,omitempty"`
}

// NewRouteUsersPermissionsInput instantiates a new RouteUsersPermissionsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteUsersPermissionsInput() *RouteUsersPermissionsInput {
	this := RouteUsersPermissionsInput{}
	return &this
}

// NewRouteUsersPermissionsInputWithDefaults instantiates a new RouteUsersPermissionsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteUsersPermissionsInputWithDefaults() *RouteUsersPermissionsInput {
	this := RouteUsersPermissionsInput{}
	return &this
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *RouteUsersPermissionsInput) GetResourceId() string {
	if o == nil || IsNil(o.ResourceId) {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteUsersPermissionsInput) GetResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *RouteUsersPermissionsInput) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *RouteUsersPermissionsInput) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *RouteUsersPermissionsInput) GetResourceType() string {
	if o == nil || IsNil(o.ResourceType) {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteUsersPermissionsInput) GetResourceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *RouteUsersPermissionsInput) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *RouteUsersPermissionsInput) SetResourceType(v string) {
	o.ResourceType = &v
}

func (o RouteUsersPermissionsInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteUsersPermissionsInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceId) {
		toSerialize["resource_id"] = o.ResourceId
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resource_type"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableRouteUsersPermissionsInput struct {
	value *RouteUsersPermissionsInput
	isSet bool
}

func (v NullableRouteUsersPermissionsInput) Get() *RouteUsersPermissionsInput {
	return v.value
}

func (v *NullableRouteUsersPermissionsInput) Set(val *RouteUsersPermissionsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteUsersPermissionsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteUsersPermissionsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteUsersPermissionsInput(val *RouteUsersPermissionsInput) *NullableRouteUsersPermissionsInput {
	return &NullableRouteUsersPermissionsInput{value: val, isSet: true}
}

func (v NullableRouteUsersPermissionsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteUsersPermissionsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


