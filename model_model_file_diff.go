/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelFileDiff type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelFileDiff{}

// ModelFileDiff struct for ModelFileDiff
type ModelFileDiff struct {
	Additions *int32 `json:"additions,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	Description *string `json:"description,omitempty"`
	DiffLink *string `json:"diff_link,omitempty"`
	FileName *string `json:"file_name,omitempty"`
}

// NewModelFileDiff instantiates a new ModelFileDiff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelFileDiff() *ModelFileDiff {
	this := ModelFileDiff{}
	return &this
}

// NewModelFileDiffWithDefaults instantiates a new ModelFileDiff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelFileDiffWithDefaults() *ModelFileDiff {
	this := ModelFileDiff{}
	return &this
}

// GetAdditions returns the Additions field value if set, zero value otherwise.
func (o *ModelFileDiff) GetAdditions() int32 {
	if o == nil || IsNil(o.Additions) {
		var ret int32
		return ret
	}
	return *o.Additions
}

// GetAdditionsOk returns a tuple with the Additions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelFileDiff) GetAdditionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Additions) {
		return nil, false
	}
	return o.Additions, true
}

// HasAdditions returns a boolean if a field has been set.
func (o *ModelFileDiff) HasAdditions() bool {
	if o != nil && !IsNil(o.Additions) {
		return true
	}

	return false
}

// SetAdditions gets a reference to the given int32 and assigns it to the Additions field.
func (o *ModelFileDiff) SetAdditions(v int32) {
	o.Additions = &v
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *ModelFileDiff) GetDeletions() int32 {
	if o == nil || IsNil(o.Deletions) {
		var ret int32
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelFileDiff) GetDeletionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *ModelFileDiff) HasDeletions() bool {
	if o != nil && !IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int32 and assigns it to the Deletions field.
func (o *ModelFileDiff) SetDeletions(v int32) {
	o.Deletions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelFileDiff) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelFileDiff) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelFileDiff) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelFileDiff) SetDescription(v string) {
	o.Description = &v
}

// GetDiffLink returns the DiffLink field value if set, zero value otherwise.
func (o *ModelFileDiff) GetDiffLink() string {
	if o == nil || IsNil(o.DiffLink) {
		var ret string
		return ret
	}
	return *o.DiffLink
}

// GetDiffLinkOk returns a tuple with the DiffLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelFileDiff) GetDiffLinkOk() (*string, bool) {
	if o == nil || IsNil(o.DiffLink) {
		return nil, false
	}
	return o.DiffLink, true
}

// HasDiffLink returns a boolean if a field has been set.
func (o *ModelFileDiff) HasDiffLink() bool {
	if o != nil && !IsNil(o.DiffLink) {
		return true
	}

	return false
}

// SetDiffLink gets a reference to the given string and assigns it to the DiffLink field.
func (o *ModelFileDiff) SetDiffLink(v string) {
	o.DiffLink = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *ModelFileDiff) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelFileDiff) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *ModelFileDiff) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *ModelFileDiff) SetFileName(v string) {
	o.FileName = &v
}

func (o ModelFileDiff) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelFileDiff) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Additions) {
		toSerialize["additions"] = o.Additions
	}
	if !IsNil(o.Deletions) {
		toSerialize["deletions"] = o.Deletions
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DiffLink) {
		toSerialize["diff_link"] = o.DiffLink
	}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	return toSerialize, nil
}

type NullableModelFileDiff struct {
	value *ModelFileDiff
	isSet bool
}

func (v NullableModelFileDiff) Get() *ModelFileDiff {
	return v.value
}

func (v *NullableModelFileDiff) Set(val *ModelFileDiff) {
	v.value = val
	v.isSet = true
}

func (v NullableModelFileDiff) IsSet() bool {
	return v.isSet
}

func (v *NullableModelFileDiff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelFileDiff(val *ModelFileDiff) *NullableModelFileDiff {
	return &NullableModelFileDiff{value: val, isSet: true}
}

func (v NullableModelFileDiff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelFileDiff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


