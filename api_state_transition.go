/*
Test Selection Services

Test Selection services, owner: DevProd Services & Integrations team

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// StateTransitionAPIService StateTransitionAPI service
type StateTransitionAPIService service

type ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest struct {
	ctx context.Context
	ApiService *StateTransitionAPIService
	projectId string
	buildVariantName string
	taskName string
	requester *string
	isRandom *bool
}

func (r ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest) Requester(requester string) ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest {
	r.requester = &requester
	return r
}

func (r ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest) IsRandom(isRandom bool) ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest {
	r.isRandom = &isRandom
	return r
}

func (r ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.MarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostExecute(r)
}

/*
MarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePost Mark Task Random By Design

Transition all tests of a single task into or out of the "Random By Design" state
:param project_id: The project id.
:param requester: The requester.
:param build_variant_name: The build variant name.
:param task_name: The task name.
:param is_random: Denote if the task should be marked random or not
:return: None

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @param buildVariantName
 @param taskName
 @return ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest
*/
func (a *StateTransitionAPIService) MarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePost(ctx context.Context, projectId string, buildVariantName string, taskName string) ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest {
	return ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		buildVariantName: buildVariantName,
		taskName: taskName,
	}
}

// Execute executes the request
//  @return interface{}
func (a *StateTransitionAPIService) MarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostExecute(r ApiMarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StateTransitionAPIService.MarkTaskRandomByDesignApiTestSelectionTransitionTaskProjectIdBuildVariantNameTaskNamePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/test_selection/transition_task/{project_id}/{build_variant_name}/{task_name}/"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"build_variant_name"+"}", url.PathEscape(parameterValueToString(r.buildVariantName, "buildVariantName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_name"+"}", url.PathEscape(parameterValueToString(r.taskName, "taskName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.requester == nil {
		return localVarReturnValue, nil, reportError("requester is required and must be specified")
	}
	if r.isRandom == nil {
		return localVarReturnValue, nil, reportError("isRandom is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "requester", r.requester, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "is_random", r.isRandom, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest struct {
	ctx context.Context
	ApiService *StateTransitionAPIService
	projectId string
	buildVariantName string
	taskName string
	isRandom *bool
	requestBody *[]string
}

func (r ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest) IsRandom(isRandom bool) ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest {
	r.isRandom = &isRandom
	return r
}

func (r ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest) RequestBody(requestBody []string) ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.MarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostExecute(r)
}

/*
MarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePost Mark Tests Random By Design

Transition a single test into or out of the "Random By Design" state
:param project_id: The project id.
:param build_variant_name: The build variant name.
:param task_name: The task name.
:param test_names: The test names to be transitioned.
:param is_random: Denote if the test should be marked random or not
:return: None

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @param buildVariantName
 @param taskName
 @return ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest
*/
func (a *StateTransitionAPIService) MarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePost(ctx context.Context, projectId string, buildVariantName string, taskName string) ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest {
	return ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		buildVariantName: buildVariantName,
		taskName: taskName,
	}
}

// Execute executes the request
//  @return interface{}
func (a *StateTransitionAPIService) MarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostExecute(r ApiMarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StateTransitionAPIService.MarkTestsRandomByDesignApiTestSelectionTransitionTestsProjectIdBuildVariantNameTaskNamePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/test_selection/transition_tests/{project_id}/{build_variant_name}/{task_name}/"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"build_variant_name"+"}", url.PathEscape(parameterValueToString(r.buildVariantName, "buildVariantName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"task_name"+"}", url.PathEscape(parameterValueToString(r.taskName, "taskName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.isRandom == nil {
		return localVarReturnValue, nil, reportError("isRandom is required and must be specified")
	}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "is_random", r.isRandom, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
