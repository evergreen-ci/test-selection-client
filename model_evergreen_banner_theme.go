/*
Evergreen REST v2 API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EvergreenBannerTheme the model 'EvergreenBannerTheme'
type EvergreenBannerTheme string

// List of evergreen.BannerTheme
const (
	Announcement EvergreenBannerTheme = "ANNOUNCEMENT"
	Information EvergreenBannerTheme = "INFORMATION"
	Warning EvergreenBannerTheme = "WARNING"
	Important EvergreenBannerTheme = "IMPORTANT"
	Empty EvergreenBannerTheme = ""
)

// All allowed values of EvergreenBannerTheme enum
var AllowedEvergreenBannerThemeEnumValues = []EvergreenBannerTheme{
	"ANNOUNCEMENT",
	"INFORMATION",
	"WARNING",
	"IMPORTANT",
	"",
}

func (v *EvergreenBannerTheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EvergreenBannerTheme(value)
	for _, existing := range AllowedEvergreenBannerThemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EvergreenBannerTheme", value)
}

// NewEvergreenBannerThemeFromValue returns a pointer to a valid EvergreenBannerTheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEvergreenBannerThemeFromValue(v string) (*EvergreenBannerTheme, error) {
	ev := EvergreenBannerTheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EvergreenBannerTheme: valid values are %v", v, AllowedEvergreenBannerThemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EvergreenBannerTheme) IsValid() bool {
	for _, existing := range AllowedEvergreenBannerThemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to evergreen.BannerTheme value
func (v EvergreenBannerTheme) Ptr() *EvergreenBannerTheme {
	return &v
}

type NullableEvergreenBannerTheme struct {
	value *EvergreenBannerTheme
	isSet bool
}

func (v NullableEvergreenBannerTheme) Get() *EvergreenBannerTheme {
	return v.value
}

func (v *NullableEvergreenBannerTheme) Set(val *EvergreenBannerTheme) {
	v.value = val
	v.isSet = true
}

func (v NullableEvergreenBannerTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableEvergreenBannerTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvergreenBannerTheme(val *EvergreenBannerTheme) *NullableEvergreenBannerTheme {
	return &NullableEvergreenBannerTheme{value: val, isSet: true}
}

func (v NullableEvergreenBannerTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvergreenBannerTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

